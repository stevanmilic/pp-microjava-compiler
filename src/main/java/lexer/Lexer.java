/* The following code was generated by JFlex 1.6.1 */

package lexer;
import parser.sym;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/main/jflex/mjlexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\64\1\65\1\1\16\6\4\0\1\3\1\55"+
    "\1\63\1\0\1\5\1\53\1\60\1\36\1\42\1\43\1\52\1\50"+
    "\1\40\1\51\1\41\1\4\1\7\11\10\1\0\1\37\1\57\1\54"+
    "\1\56\2\0\32\5\1\44\1\62\1\45\1\0\1\5\1\0\1\15"+
    "\1\17\1\22\1\32\1\20\1\30\1\14\1\5\1\27\1\5\1\21"+
    "\1\23\1\16\1\25\1\13\1\11\1\5\1\12\1\24\1\26\1\33"+
    "\1\34\1\31\1\35\2\5\1\46\1\61\1\47\1\0\6\6\1\66"+
    "\32\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0"+
    "\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0"+
    "\5\5\7\0\1\5\1\0\1\5\21\0\160\6\5\5\1\0\2\5"+
    "\2\0\4\5\10\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\123\5\1\0\213\5\1\0\5\6\2\0\236\5\11\0\46\5"+
    "\2\0\1\5\7\0\47\5\7\0\1\5\1\0\55\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\5\5\0\3\5"+
    "\15\0\5\6\6\0\1\5\4\0\13\6\5\0\53\5\37\6\4\0"+
    "\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6"+
    "\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5"+
    "\1\6\36\5\33\6\2\0\131\5\13\6\1\5\16\0\12\6\41\5"+
    "\11\6\2\5\4\0\1\5\5\0\26\5\4\6\1\5\11\6\1\5"+
    "\3\6\1\5\5\6\22\0\31\5\3\6\104\0\1\5\1\0\13\5"+
    "\67\0\33\6\1\0\4\6\66\5\3\6\1\5\22\6\1\5\7\6"+
    "\12\5\2\6\2\0\12\6\1\0\7\5\1\0\7\5\1\0\3\6"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6"+
    "\1\5\10\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6"+
    "\4\5\7\0\1\5\5\0\3\6\1\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0"+
    "\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0"+
    "\4\5\1\0\1\5\7\0\14\6\3\5\1\6\13\0\3\6\1\0"+
    "\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0"+
    "\1\5\17\0\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6"+
    "\10\0\2\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\1\0"+
    "\1\5\20\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5"+
    "\3\0\14\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5"+
    "\6\0\1\6\16\0\12\6\11\0\1\5\7\0\3\6\1\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5"+
    "\7\6\1\0\3\6\1\0\4\6\7\0\2\6\1\0\2\5\6\0"+
    "\2\5\2\6\2\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5"+
    "\2\6\2\0\12\6\1\0\2\5\17\0\2\6\1\0\10\5\1\0"+
    "\3\5\1\0\51\5\2\0\1\5\7\6\1\0\3\6\1\0\4\6"+
    "\1\5\10\0\1\6\10\0\2\5\2\6\2\0\12\6\12\0\6\5"+
    "\2\0\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6"+
    "\22\0\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6"+
    "\1\0\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5"+
    "\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5"+
    "\1\0\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0"+
    "\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6"+
    "\2\0\4\5\40\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\10\5\1\0\44\5\4\0"+
    "\24\6\1\0\2\6\5\5\13\6\1\0\44\6\11\0\1\6\71\0"+
    "\53\5\24\6\1\5\12\6\6\0\6\5\4\6\4\5\3\6\1\5"+
    "\3\6\2\5\7\6\3\5\4\6\15\5\14\6\1\5\17\6\2\0"+
    "\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0"+
    "\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5\2\0"+
    "\3\6\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0"+
    "\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\6"+
    "\13\0\22\5\3\6\13\0\22\5\2\6\14\0\15\5\1\0\3\5"+
    "\1\0\2\6\14\0\64\5\40\6\3\0\1\5\3\0\2\5\1\6"+
    "\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\5\10\0\51\5"+
    "\1\6\1\5\5\0\106\5\12\0\35\5\3\0\14\6\4\0\14\6"+
    "\12\0\12\6\36\5\2\0\5\5\13\0\54\5\4\0\21\6\7\5"+
    "\2\6\6\0\12\6\46\0\27\5\5\6\4\0\65\5\12\6\1\0"+
    "\35\6\2\0\13\6\6\0\12\6\15\0\1\5\130\0\5\6\57\5"+
    "\21\6\7\5\4\0\12\6\21\0\11\6\14\0\3\6\36\5\15\6"+
    "\2\5\12\6\54\5\16\6\14\0\44\5\24\6\10\0\12\6\3\0"+
    "\3\5\12\6\44\5\122\0\3\6\1\0\25\6\4\5\1\6\4\5"+
    "\3\6\2\5\11\0\300\5\47\6\25\0\4\6\u0116\5\2\0\6\5"+
    "\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5"+
    "\5\0\3\5\1\0\7\5\16\0\5\6\30\0\1\64\1\64\5\6"+
    "\20\0\2\5\23\0\1\5\13\0\5\6\5\0\6\6\1\0\1\5"+
    "\15\0\1\5\20\0\15\5\3\0\33\5\25\0\15\6\4\0\1\6"+
    "\3\0\14\6\21\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5"+
    "\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5\3\6\2\5"+
    "\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5\7\0\1\5"+
    "\17\0\1\6\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0\5\5"+
    "\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5"+
    "\3\0\20\5\12\6\2\5\24\0\57\5\1\6\4\0\12\6\1\0"+
    "\31\5\7\0\1\6\120\5\2\6\45\0\11\5\2\0\147\5\2\0"+
    "\4\5\1\0\4\5\14\0\13\5\115\0\12\5\1\6\3\5\1\6"+
    "\4\5\1\6\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6"+
    "\62\5\21\6\13\0\12\6\6\0\22\6\6\5\3\0\1\5\4\0"+
    "\12\6\34\5\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6"+
    "\57\5\16\6\16\0\1\5\12\6\46\0\51\5\16\6\11\0\3\5"+
    "\1\6\10\5\2\6\2\0\12\6\6\0\27\5\3\0\1\5\1\6"+
    "\4\0\60\5\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5"+
    "\1\6\1\5\30\0\3\5\2\0\13\5\5\6\2\0\3\5\2\6"+
    "\12\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5"+
    "\221\0\43\5\10\6\1\0\2\6\2\0\12\6\6\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\7\6\14\0"+
    "\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0"+
    "\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0"+
    "\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0\14\5\1\0"+
    "\32\5\1\0\23\5\1\0\2\5\1\0\17\5\2\0\16\5\42\0"+
    "\173\5\105\0\65\5\210\0\1\6\202\0\35\5\3\0\61\5\57\0"+
    "\37\5\21\0\33\5\65\0\36\5\2\0\44\5\4\0\10\5\1\0"+
    "\5\5\52\0\236\5\2\0\12\6\u0356\0\6\5\2\0\1\5\1\0"+
    "\54\5\1\0\2\5\3\0\1\5\2\0\27\5\252\0\26\5\12\0"+
    "\32\5\106\0\70\5\6\0\2\5\100\0\1\5\3\6\1\0\2\6"+
    "\5\0\4\6\4\5\1\0\3\5\1\0\33\5\4\0\3\6\4\0"+
    "\1\6\40\0\35\5\203\0\66\5\12\0\26\5\12\0\23\5\215\0"+
    "\111\5\u03b7\0\3\6\65\5\17\6\37\0\12\6\20\0\3\6\55\5"+
    "\13\6\2\0\1\6\22\0\31\5\7\0\12\6\6\0\3\6\44\5"+
    "\16\6\1\0\12\6\100\0\3\6\60\5\16\6\4\5\13\0\12\6"+
    "\u04a6\0\53\5\15\6\10\0\12\6\u0936\0\u036f\5\221\0\143\5\u0b9d\0"+
    "\u042f\5\u33d1\0\u0239\5\u04c7\0\105\5\13\0\1\5\56\6\20\0\4\6"+
    "\15\5\u4060\0\2\5\u2163\0\5\6\3\0\26\6\2\0\7\6\36\0"+
    "\4\6\224\0\3\6\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0"+
    "\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0"+
    "\7\5\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0"+
    "\34\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\7\5\1\0"+
    "\u0154\5\2\0\31\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0"+
    "\31\5\1\0\10\5\2\0\62\6\u1600\0\4\5\1\0\33\5\1\0"+
    "\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0"+
    "\1\5\1\0\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0"+
    "\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0"+
    "\1\5\1\0\12\5\1\0\21\5\5\0\3\5\1\0\5\5\1\0"+
    "\21\5\u1144\0\ua6d7\5\51\0\u1035\5\13\0\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\13\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\1\2\30\1\31\1\1\1\2\1\32\13\4"+
    "\1\33\3\4\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\11\50\12\4"+
    "\1\51\2\4\1\52\2\4\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\2\4\1\63\2\4\1\64"+
    "\5\4\1\65\1\66\1\4\1\67\1\4\1\70\1\4"+
    "\1\71\1\4\1\72\1\4\1\73\1\4\1\74\1\4"+
    "\1\75\2\4\1\76\1\77\1\100\1\4\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\334\0\u0113\0\156"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\156\0\156\0\u063b\0\u0672\0\156\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0113\0\u0906\0\u093d\0\u0974\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0113\0\u0d89\0\u0dc0\0\u0113"+
    "\0\u0df7\0\u0e2e\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\u0e65\0\u0e9c\0\u0113\0\u0ed3\0\u0f0a\0\u0113"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u0113\0\u0113\0\u1054"+
    "\0\u0113\0\u108b\0\u0113\0\u10c2\0\u0113\0\u10f9\0\u0113\0\u1130"+
    "\0\u0113\0\u1167\0\u0113\0\u119e\0\u0113\0\u11d5\0\u120c\0\u0113"+
    "\0\u0113\0\u0113\0\u1243\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\4\7\1\14\1\15\1\7\1\16\1\7"+
    "\1\17\1\20\1\21\1\22\1\23\3\7\1\24\1\7"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\3\3\1\5\2\3\1\51"+
    "\1\52\33\3\1\53\23\3\1\54\4\3\71\0\1\5"+
    "\70\0\1\55\47\0\1\56\17\0\31\7\30\0\1\7"+
    "\7\0\2\11\63\0\5\7\1\57\23\7\30\0\1\7"+
    "\5\0\13\7\1\60\15\7\30\0\1\7\5\0\5\7"+
    "\1\61\23\7\30\0\1\7\5\0\16\7\1\62\11\7"+
    "\1\63\30\0\1\7\5\0\6\7\1\64\7\7\1\65"+
    "\12\7\30\0\1\7\5\0\21\7\1\66\7\7\30\0"+
    "\1\7\5\0\13\7\1\67\12\7\1\70\2\7\30\0"+
    "\1\7\5\0\5\7\1\71\23\7\30\0\1\7\5\0"+
    "\23\7\1\72\5\7\30\0\1\7\5\0\6\7\1\73"+
    "\1\7\1\74\20\7\30\0\1\7\5\0\6\7\1\75"+
    "\22\7\30\0\1\7\50\0\1\76\3\0\1\77\63\0"+
    "\1\100\2\0\1\101\66\0\1\102\66\0\1\103\66\0"+
    "\1\104\66\0\1\105\66\0\1\106\66\0\1\107\72\0"+
    "\1\110\67\0\1\111\7\0\1\52\64\0\1\112\2\0"+
    "\7\112\1\113\4\112\1\114\5\112\1\115\1\116\1\112"+
    "\1\117\5\112\1\120\23\112\1\121\1\122\3\0\1\55"+
    "\1\4\1\5\64\55\5\0\6\7\1\123\13\7\1\124"+
    "\6\7\30\0\1\7\5\0\10\7\1\125\10\7\1\126"+
    "\7\7\30\0\1\7\5\0\13\7\1\127\15\7\30\0"+
    "\1\7\5\0\17\7\1\130\11\7\30\0\1\7\5\0"+
    "\21\7\1\131\7\7\30\0\1\7\5\0\20\7\1\132"+
    "\10\7\30\0\1\7\5\0\10\7\1\133\20\7\30\0"+
    "\1\7\5\0\10\7\1\134\20\7\30\0\1\7\5\0"+
    "\24\7\1\135\4\7\30\0\1\7\5\0\16\7\1\136"+
    "\12\7\30\0\1\7\5\0\26\7\1\137\2\7\30\0"+
    "\1\7\5\0\5\7\1\140\23\7\30\0\1\7\5\0"+
    "\16\7\1\141\12\7\30\0\1\7\5\0\22\7\1\142"+
    "\6\7\30\0\1\7\36\0\1\143\66\0\1\144\66\0"+
    "\1\145\66\0\1\146\66\0\1\147\66\0\1\150\66\0"+
    "\1\151\66\0\1\152\35\0\7\7\1\153\21\7\30\0"+
    "\1\7\5\0\20\7\1\154\10\7\30\0\1\7\5\0"+
    "\25\7\1\155\3\7\30\0\1\7\5\0\26\7\1\156"+
    "\2\7\30\0\1\7\5\0\10\7\1\157\20\7\30\0"+
    "\1\7\5\0\13\7\1\160\15\7\30\0\1\7\5\0"+
    "\13\7\1\161\15\7\30\0\1\7\5\0\17\7\1\162"+
    "\1\7\1\163\7\7\30\0\1\7\5\0\17\7\1\164"+
    "\11\7\30\0\1\7\5\0\21\7\1\165\7\7\30\0"+
    "\1\7\5\0\16\7\1\166\12\7\30\0\1\7\5\0"+
    "\13\7\1\167\15\7\30\0\1\7\5\0\17\7\1\170"+
    "\11\7\30\0\1\7\5\0\25\7\1\171\3\7\30\0"+
    "\1\7\5\0\5\7\1\172\23\7\30\0\1\7\5\0"+
    "\21\7\1\173\7\7\30\0\1\7\5\0\5\7\1\174"+
    "\23\7\30\0\1\7\5\0\14\7\1\175\14\7\30\0"+
    "\1\7\5\0\20\7\1\176\10\7\30\0\1\7\5\0"+
    "\21\7\1\177\7\7\30\0\1\7\5\0\22\7\1\200"+
    "\6\7\30\0\1\7\5\0\17\7\1\201\11\7\30\0"+
    "\1\7\5\0\22\7\1\202\6\7\30\0\1\7\5\0"+
    "\13\7\1\203\15\7\30\0\1\7\5\0\10\7\1\204"+
    "\20\7\30\0\1\7\5\0\20\7\1\205\10\7\30\0"+
    "\1\7\5\0\25\7\1\206\3\7\30\0\1\7\5\0"+
    "\20\7\1\207\10\7\30\0\1\7\5\0\15\7\1\210"+
    "\13\7\30\0\1\7\5\0\11\7\1\211\17\7\30\0"+
    "\1\7\5\0\17\7\1\212\11\7\30\0\1\7\5\0"+
    "\26\7\1\213\2\7\30\0\1\7\5\0\13\7\1\214"+
    "\15\7\30\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\14\1\12\11"+
    "\13\1\2\11\2\1\1\11\17\1\15\11\30\1\10\11"+
    "\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	private Symbol symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn+1);
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2858) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \"" + yytext()+ "\" at line " + yyline + ", column " + yycolumn);
            }
          case 66: break;
          case 2: 
            { /* ignore */
            }
          case 67: break;
          case 3: 
            { return symbol(sym.DIV, yytext());
            }
          case 68: break;
          case 4: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 69: break;
          case 5: 
            { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 70: break;
          case 6: 
            { yybegin(CHARLITERAL);
            }
          case 71: break;
          case 7: 
            { return symbol(sym.SEMICOLON, yytext());
            }
          case 72: break;
          case 8: 
            { return symbol(sym.COMMA, yytext());
            }
          case 73: break;
          case 9: 
            { return symbol(sym.DOT, yytext());
            }
          case 74: break;
          case 10: 
            { return symbol(sym.LPAREN, yytext());
            }
          case 75: break;
          case 11: 
            { return symbol(sym.RPAREN, yytext());
            }
          case 76: break;
          case 12: 
            { return symbol(sym.LBRACK, yytext());
            }
          case 77: break;
          case 13: 
            { return symbol(sym.RBRACK, yytext());
            }
          case 78: break;
          case 14: 
            { return symbol(sym.LBRACE, yytext());
            }
          case 79: break;
          case 15: 
            { return symbol(sym.RBRACE, yytext());
            }
          case 80: break;
          case 16: 
            { return symbol(sym.PLUS, yytext());
            }
          case 81: break;
          case 17: 
            { return symbol(sym.MINUS, yytext());
            }
          case 82: break;
          case 18: 
            { return symbol(sym.MULT, yytext());
            }
          case 83: break;
          case 19: 
            { return symbol(sym.MOD, yytext());
            }
          case 84: break;
          case 20: 
            { return symbol(sym.EQ, yytext());
            }
          case 85: break;
          case 21: 
            { return symbol(sym.NOT, yytext());
            }
          case 86: break;
          case 22: 
            { return symbol(sym.GT, yytext());
            }
          case 87: break;
          case 23: 
            { return symbol(sym.LT, yytext());
            }
          case 88: break;
          case 24: 
            { throw new RuntimeException("Unterminated character literal at the end of a line");
            }
          case 89: break;
          case 25: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, yytext().charAt(0));
            }
          case 90: break;
          case 26: 
            { return symbol(sym.DIVEQ, yytext());
            }
          case 91: break;
          case 27: 
            { return symbol(sym.IF, yytext());
            }
          case 92: break;
          case 28: 
            { return symbol(sym.PLUSPLUS, yytext());
            }
          case 93: break;
          case 29: 
            { return symbol(sym.PLUSEQ, yytext());
            }
          case 94: break;
          case 30: 
            { return symbol(sym.MINUSMINUS, yytext());
            }
          case 95: break;
          case 31: 
            { return symbol(sym.MINUSEQ, yytext());
            }
          case 96: break;
          case 32: 
            { return symbol(sym.MULTEQ, yytext());
            }
          case 97: break;
          case 33: 
            { return symbol(sym.MODEQ, yytext());
            }
          case 98: break;
          case 34: 
            { return symbol(sym.EQEQ, yytext());
            }
          case 99: break;
          case 35: 
            { return symbol(sym.NOTEQ, yytext());
            }
          case 100: break;
          case 36: 
            { return symbol(sym.GTEQ, yytext());
            }
          case 101: break;
          case 37: 
            { return symbol(sym.LTEQ, yytext());
            }
          case 102: break;
          case 38: 
            { return symbol(sym.ANDAND, yytext());
            }
          case 103: break;
          case 39: 
            { return symbol(sym.OROR, yytext());
            }
          case 104: break;
          case 40: 
            { throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
            }
          case 105: break;
          case 41: 
            { return symbol(sym.NEW, yytext());
            }
          case 106: break;
          case 42: 
            { return symbol(sym.FOR, yytext());
            }
          case 107: break;
          case 43: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\r');
            }
          case 108: break;
          case 44: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\b');
            }
          case 109: break;
          case 45: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\n');
            }
          case 110: break;
          case 46: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\t');
            }
          case 111: break;
          case 47: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\f');
            }
          case 112: break;
          case 48: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\'');
            }
          case 113: break;
          case 49: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\\');
            }
          case 114: break;
          case 50: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\"');
            }
          case 115: break;
          case 51: 
            { return symbol(sym.READ, yytext());
            }
          case 116: break;
          case 52: 
            { return symbol(sym.ELSE, yytext());
            }
          case 117: break;
          case 53: 
            { return symbol(sym.NULL_LITERAL, yytext());
            }
          case 118: break;
          case 54: 
            { return symbol(sym.BOOL_LITERAL, true);
            }
          case 119: break;
          case 55: 
            { return symbol(sym.VOID, yytext());
            }
          case 120: break;
          case 56: 
            { return symbol(sym.PRINT, yytext());
            }
          case 121: break;
          case 57: 
            { return symbol(sym.BREAK, yytext());
            }
          case 122: break;
          case 58: 
            { return symbol(sym.CONST, yytext());
            }
          case 123: break;
          case 59: 
            { return symbol(sym.CLASS, yytext());
            }
          case 124: break;
          case 60: 
            { return symbol(sym.BOOL_LITERAL, false);
            }
          case 125: break;
          case 61: 
            { return symbol(sym.RETURN, yytext());
            }
          case 126: break;
          case 62: 
            { return symbol(sym.STATIC, yytext());
            }
          case 127: break;
          case 63: 
            { return symbol(sym.PROGRAM, yytext());
            }
          case 128: break;
          case 64: 
            { return symbol(sym.EXTENDS, yytext());
            }
          case 129: break;
          case 65: 
            { return symbol(sym.CONTINUE, yytext());
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
