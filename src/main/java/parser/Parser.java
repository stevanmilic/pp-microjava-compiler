
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 02 18:56:54 CEST 2017
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.Lexer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.BufferedReader;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 02 18:56:54 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\100\002\000\002\003\005\000\002\003\004" +
    "\000\002\003\002\000\002\004\006\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\014\004\000\002" +
    "\014\002\000\002\015\006\000\002\017\004\000\002\017" +
    "\002\000\002\016\006\000\002\020\005\000\002\020\002" +
    "\000\002\024\004\000\002\024\002\000\002\021\004\000" +
    "\002\101\002\000\002\022\011\000\002\026\003\000\002" +
    "\026\002\000\002\025\003\000\002\025\003\000\002\023" +
    "\006\000\002\027\003\000\002\027\002\000\002\031\003" +
    "\000\002\031\005\000\002\030\004\000\002\030\006\000" +
    "\002\032\003\000\002\033\004\000\002\033\002\000\002" +
    "\034\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\005\000" +
    "\002\035\007\000\002\036\011\000\002\037\013\000\002" +
    "\040\003\000\002\040\002\000\002\041\003\000\002\041" +
    "\002\000\002\042\005\000\002\043\003\000\002\043\002" +
    "\000\002\044\007\000\002\045\010\000\002\046\004\000" +
    "\002\046\002\000\002\047\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\005\000\002\050\003\000\002\050" +
    "\003\000\002\051\003\000\002\051\002\000\002\052\005" +
    "\000\002\052\003\000\002\053\005\000\002\053\003\000" +
    "\002\055\005\000\002\055\003\000\002\054\004\000\002" +
    "\056\004\000\002\056\002\000\002\057\005\000\002\057" +
    "\004\000\002\060\003\000\002\060\002\000\002\061\005" +
    "\000\002\061\003\000\002\062\004\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\005\000\002" +
    "\062\005\000\002\063\005\000\002\063\002\000\002\064" +
    "\005\000\002\064\002\000\002\065\004\000\002\066\004" +
    "\000\002\066\002\000\002\067\004\000\002\067\005\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\072\003" +
    "\000\002\072\003\000\002\073\003\000\002\073\003\000" +
    "\002\074\003\000\002\074\003\000\002\075\003\000\002" +
    "\075\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\004\005\001\002\000\004\002\326\001" +
    "\002\000\004\023\006\001\002\000\012\006\ufffb\010\ufffb" +
    "\023\ufffb\037\ufffb\001\002\000\012\006\015\010\010\023" +
    "\ufffe\037\011\001\002\000\004\023\027\001\002\000\012" +
    "\016\uffe0\022\uffe0\023\uffe0\040\uffe0\001\002\000\004\023" +
    "\027\001\002\000\012\006\uffff\010\uffff\023\uffff\037\uffff" +
    "\001\002\000\012\006\ufffc\010\ufffc\023\ufffc\037\ufffc\001" +
    "\002\000\004\023\016\001\002\000\006\020\017\037\uffe5" +
    "\001\002\000\004\023\027\001\002\000\004\037\021\001" +
    "\002\000\010\023\ufff1\037\ufff1\040\ufff1\001\002\000\012" +
    "\006\uffe7\010\uffe7\023\uffe7\037\uffe7\001\002\000\010\023" +
    "\027\037\024\040\uffe2\001\002\000\012\016\uffe0\022\uffe0" +
    "\023\uffe0\040\uffe0\001\002\000\004\040\046\001\002\000" +
    "\006\003\032\023\033\001\002\000\066\003\uffd1\023\uffd1" +
    "\030\uffd1\031\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\001\002\000\010" +
    "\023\ufff2\037\ufff2\040\ufff2\001\002\000\006\030\uffeb\031" +
    "\uffeb\001\002\000\020\006\uffee\010\uffee\023\uffee\030\044" +
    "\031\043\037\uffee\040\uffee\001\002\000\010\030\uffe8\031" +
    "\uffe8\035\041\001\002\000\006\030\036\031\035\001\002" +
    "\000\004\023\033\001\002\000\014\006\ufff0\010\ufff0\023" +
    "\ufff0\037\ufff0\040\ufff0\001\002\000\006\030\uffed\031\uffed" +
    "\001\002\000\006\030\uffea\031\uffea\001\002\000\004\036" +
    "\042\001\002\000\006\030\uffe9\031\uffe9\001\002\000\004" +
    "\023\033\001\002\000\014\006\uffef\010\uffef\023\uffef\037" +
    "\uffef\040\uffef\001\002\000\006\030\uffec\031\uffec\001\002" +
    "\000\012\006\uffe4\010\uffe4\023\uffe4\037\uffe4\001\002\000" +
    "\012\016\uffdb\022\053\023\uffdb\040\054\001\002\000\012" +
    "\016\uffe1\022\uffe1\023\uffe1\040\uffe1\001\002\000\006\016" +
    "\267\023\027\001\002\000\006\023\ufff1\037\ufff1\001\002" +
    "\000\006\016\uffdc\023\uffdc\001\002\000\004\040\uffe3\001" +
    "\002\000\012\016\uffdf\022\uffdf\023\uffdf\040\uffdf\001\002" +
    "\000\006\023\027\037\057\001\002\000\026\005\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\023\uffcf" +
    "\037\uffcf\040\uffcf\001\002\000\026\005\100\011\070\013" +
    "\101\014\061\015\066\017\103\021\062\023\067\037\072" +
    "\040\064\001\002\000\004\033\261\001\002\000\004\030" +
    "\260\001\002\000\026\005\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\017\uffd0\021\uffd0\023\uffd0\037\uffd0\040\uffd0\001" +
    "\002\000\012\016\uffd8\022\uffd8\023\uffd8\040\uffd8\001\002" +
    "\000\030\005\uffc6\007\uffc6\011\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\021\uffc6\023\uffc6\037\uffc6\040\uffc6\001\002" +
    "\000\022\012\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030" +
    "\uffbb\033\uffa2\042\112\001\002\000\072\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
    "\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\001\002\000\004\033\240\001\002\000\030\005\uffc7\007" +
    "\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\021\uffc7" +
    "\023\uffc7\037\uffc7\040\uffc7\001\002\000\026\005\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\023\uffcf" +
    "\037\uffcf\040\uffcf\001\002\000\030\005\uffc8\007\uffc8\011" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\021\uffc8\023\uffc8" +
    "\037\uffc8\040\uffc8\001\002\000\004\030\235\001\002\000" +
    "\030\005\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\021\uffcd\023\uffcd\037\uffcd\040\uffcd\001\002\000" +
    "\030\005\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\017\uffcb\021\uffcb\023\uffcb\037\uffcb\040\uffcb\001\002\000" +
    "\024\033\227\046\223\047\230\060\226\061\131\062\134" +
    "\063\166\064\167\065\175\001\002\000\004\030\220\001" +
    "\002\000\004\033\211\001\002\000\030\005\uffcc\007\uffcc" +
    "\011\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc\023" +
    "\uffcc\037\uffcc\040\uffcc\001\002\000\004\033\104\001\002" +
    "\000\006\023\067\030\uffc0\001\002\000\006\030\uffc1\034" +
    "\uffc1\001\002\000\004\030\107\001\002\000\022\012\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffbe\033\uffa2\042" +
    "\112\001\002\000\016\012\143\023\067\024\152\025\150" +
    "\026\144\033\151\001\002\000\004\030\204\001\002\000" +
    "\016\012\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\033\uffa3" +
    "\001\002\000\012\030\uffa9\034\uffa9\056\uffa9\057\uffa9\001" +
    "\002\000\012\030\uffab\034\uffab\056\121\057\uffab\001\002" +
    "\000\036\030\uffa6\034\uffa6\041\133\042\123\050\124\051" +
    "\130\052\136\053\141\054\125\055\140\056\uffa6\057\uffa6" +
    "\061\131\062\134\001\002\000\006\030\uffbf\057\117\001" +
    "\002\000\020\012\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\033\uffa2\042\112\001\002\000\012\030\uffac\034\uffac\056" +
    "\121\057\uffac\001\002\000\020\012\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\033\uffa2\042\112\001\002\000\012\030" +
    "\uffaa\034\uffaa\056\uffaa\057\uffaa\001\002\000\016\012\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\033\uff84\001\002\000" +
    "\020\012\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\033\uff8d" +
    "\042\uff8d\001\002\000\020\012\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\033\uff8a\042\uff8a\001\002\000\012\030\uffa8" +
    "\034\uffa8\056\uffa8\057\uffa8\001\002\000\016\012\143\023" +
    "\067\024\152\025\150\026\144\033\151\001\002\000\020" +
    "\012\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\033\uff8c\042" +
    "\uff8c\001\002\000\022\003\uff83\012\uff83\023\uff83\024\uff83" +
    "\025\uff83\026\uff83\033\uff83\042\uff83\001\002\000\016\012" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\033\uff86\001\002" +
    "\000\016\012\uff85\023\uff85\024\uff85\025\uff85\026\uff85\033" +
    "\uff85\001\002\000\022\003\uff82\012\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\033\uff82\042\uff82\001\002\000\016\012" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\033\uff87\001\002" +
    "\000\020\012\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\033" +
    "\uff8b\042\uff8b\001\002\000\020\012\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\033\uffa2\042\112\001\002\000\020\012" +
    "\uff88\023\uff88\024\uff88\025\uff88\026\uff88\033\uff88\042\uff88" +
    "\001\002\000\020\012\uff89\023\uff89\024\uff89\025\uff89\026" +
    "\uff89\033\uff89\042\uff89\001\002\000\022\030\uffa7\034\uffa7" +
    "\041\133\042\123\056\uffa7\057\uffa7\061\131\062\134\001" +
    "\002\000\004\023\027\001\002\000\056\030\uff9c\031\uff9c" +
    "\034\uff9c\036\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\001\002\000\056\030\uffa5\031\uffa5\034\uffa5\036\uffa5" +
    "\041\uffa5\042\uffa5\043\170\044\173\045\171\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\061\uffa5\062\uffa5\063\166\064\167\065\175\001\002\000" +
    "\060\030\uff98\031\uff98\033\156\034\uff98\036\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\050\uff98\051\uff98\052" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\061\uff98" +
    "\062\uff98\063\uff98\064\uff98\065\uff98\001\002\000\056\030" +
    "\uffa0\031\uffa0\034\uffa0\036\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\001\002\000\056\030\uff9d\031\uff9d\034" +
    "\uff9d\036\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\001\002\000\020\012\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\033\uffa2\042\112\001\002\000\056\030\uff9e\031\uff9e" +
    "\034\uff9e\036\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\001\002\000\014\034\154\041\133\042\123\061\131" +
    "\062\134\001\002\000\056\030\uff9a\031\uff9a\034\uff9a\036" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\001\002" +
    "\000\056\030\uff9f\031\uff9f\034\uff9f\036\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\001\002\000\022\012\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\033\uffa2\034\uffaf\042" +
    "\112\001\002\000\004\034\164\001\002\000\016\031\uffad" +
    "\034\uffad\041\133\042\123\061\131\062\134\001\002\000" +
    "\006\031\162\034\uffb0\001\002\000\020\012\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\033\uffa2\042\112\001\002\000" +
    "\016\031\uffae\034\uffae\041\133\042\123\061\131\062\134" +
    "\001\002\000\056\030\uff99\031\uff99\034\uff99\036\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\001\002\000\016" +
    "\012\uff80\023\uff80\024\uff80\025\uff80\026\uff80\033\uff80\001" +
    "\002\000\022\003\uff7c\012\uff7c\023\uff7c\024\uff7c\025\uff7c" +
    "\026\uff7c\033\uff7c\042\uff7c\001\002\000\022\003\uff7b\012" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\033\uff7b\042\uff7b" +
    "\001\002\000\016\012\uff7f\023\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\033\uff7f\001\002\000\016\012\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\033\uff7d\001\002\000\016\012\143\023" +
    "\067\024\152\025\150\026\144\033\151\001\002\000\016" +
    "\012\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\033\uff7e\001" +
    "\002\000\016\012\uff81\023\uff81\024\uff81\025\uff81\026\uff81" +
    "\033\uff81\001\002\000\022\003\uff7a\012\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\033\uff7a\042\uff7a\001\002\000\056" +
    "\030\uffa1\031\uffa1\034\uffa1\036\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\001\002\000\060\030\uff96\031\uff96" +
    "\034\uff96\035\201\036\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\061\uff96\062\uff96\063\uff96\064" +
    "\uff96\065\uff96\001\002\000\056\030\uff9b\031\uff9b\034\uff9b" +
    "\036\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\001" +
    "\002\000\020\012\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\033\uffa2\042\112\001\002\000\014\036\203\041\133\042" +
    "\123\061\131\062\134\001\002\000\056\030\uff97\031\uff97" +
    "\034\uff97\036\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\057\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\001\002\000\006\023\067\034\uffc0\001\002\000\004" +
    "\034\206\001\002\000\024\005\100\011\070\013\101\014" +
    "\061\015\066\017\103\021\062\023\067\037\072\001\002" +
    "\000\030\005\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\021\uffc2\023\uffc2\037\uffc2\040\uffc2\001\002" +
    "\000\056\030\uffa4\031\uffa4\034\uffa4\036\uffa4\041\uffa4\042" +
    "\uffa4\043\170\044\173\045\171\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062" +
    "\uffa4\063\166\064\167\065\175\001\002\000\020\012\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\033\uffa2\042\112\001" +
    "\002\000\016\031\213\034\uffb7\041\133\042\123\061\131" +
    "\062\134\001\002\000\004\024\217\001\002\000\004\034" +
    "\215\001\002\000\004\030\216\001\002\000\030\005\uffb9" +
    "\007\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\021" +
    "\uffb9\023\uffb9\037\uffb9\040\uffb9\001\002\000\004\034\uffb8" +
    "\001\002\000\030\005\uffca\007\uffca\011\uffca\013\uffca\014" +
    "\uffca\015\uffca\017\uffca\021\uffca\023\uffca\037\uffca\040\uffca" +
    "\001\002\000\022\003\uff8e\012\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\033\uff8e\042\uff8e\001\002\000\006\030\uffb6" +
    "\034\uffb6\001\002\000\006\030\uffb2\034\uffb2\001\002\000" +
    "\022\003\233\012\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\033\uffa2\042\112\001\002\000\022\003\uff8f\012\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\033\uff8f\042\uff8f\001\002" +
    "\000\022\003\uff90\012\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\033\uff90\042\uff90\001\002\000\022\012\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\033\uffa2\034\uffaf\042\112\001" +
    "\002\000\006\030\uffb1\034\uffb1\001\002\000\004\034\232" +
    "\001\002\000\006\030\uffb3\034\uffb3\001\002\000\006\030" +
    "\uffb4\034\uffb4\001\002\000\016\030\uffb5\034\uffb5\041\133" +
    "\042\123\061\131\062\134\001\002\000\030\005\uffce\007" +
    "\uffce\011\uffce\013\uffce\014\uffce\015\uffce\017\uffce\021\uffce" +
    "\023\uffce\037\uffce\040\uffce\001\002\000\026\005\100\011" +
    "\070\013\101\014\061\015\066\017\103\021\062\023\067" +
    "\037\072\040\237\001\002\000\030\005\uffc5\007\uffc5\011" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\023\uffc5" +
    "\037\uffc5\040\uffc5\001\002\000\020\012\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\033\uffa2\042\112\001\002\000\006" +
    "\034\242\057\117\001\002\000\024\005\100\011\070\013" +
    "\101\014\061\015\066\017\103\021\062\023\067\037\072" +
    "\001\002\000\030\005\uffc4\007\244\011\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\017\uffc4\021\uffc4\023\uffc4\037\uffc4\040\uffc4" +
    "\001\002\000\024\005\100\011\070\013\101\014\061\015" +
    "\066\017\103\021\062\023\067\037\072\001\002\000\030" +
    "\005\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\021\uffc3\023\uffc3\037\uffc3\040\uffc3\001\002\000\072" +
    "\030\uff95\031\uff95\032\250\033\uff95\034\uff95\035\247\036" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\001\002\000\020\012\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\033\uffa2\042\112\001\002\000\004" +
    "\023\252\001\002\000\072\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\001\002\000" +
    "\072\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\036\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063" +
    "\uff92\064\uff92\065\uff92\001\002\000\014\036\254\041\133" +
    "\042\123\061\131\062\134\001\002\000\072\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\001\002\000\014\030\uffbc\041\133\042\123\061\131" +
    "\062\134\001\002\000\004\030\257\001\002\000\030\005" +
    "\uffbd\007\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\021\uffbd\023\uffbd\037\uffbd\040\uffbd\001\002\000\030\005" +
    "\uffc9\007\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9" +
    "\021\uffc9\023\uffc9\037\uffc9\040\uffc9\001\002\000\004\023" +
    "\067\001\002\000\004\034\263\001\002\000\004\030\264" +
    "\001\002\000\030\005\uffba\007\uffba\011\uffba\013\uffba\014" +
    "\uffba\015\uffba\017\uffba\021\uffba\023\uffba\037\uffba\040\uffba" +
    "\001\002\000\004\023\270\001\002\000\004\023\uffd9\001" +
    "\002\000\004\023\uffda\001\002\000\004\033\uffde\001\002" +
    "\000\004\033\272\001\002\000\006\023\027\034\uffd6\001" +
    "\002\000\006\031\303\034\uffd7\001\002\000\004\034\302" +
    "\001\002\000\004\023\277\001\002\000\006\031\uffd5\034" +
    "\uffd5\001\002\000\010\031\uffd3\034\uffd3\035\300\001\002" +
    "\000\004\036\301\001\002\000\006\031\uffd2\034\uffd2\001" +
    "\002\000\006\023\uffdd\037\uffdd\001\002\000\004\023\027" +
    "\001\002\000\006\031\uffd4\034\uffd4\001\002\000\004\037" +
    "\uffe6\001\002\000\012\006\ufffd\010\ufffd\023\ufffd\037\ufffd" +
    "\001\002\000\012\016\uffdb\022\053\023\uffdb\040\310\001" +
    "\002\000\004\002\001\001\002\000\004\023\314\001\002" +
    "\000\006\030\324\031\323\001\002\000\006\030\ufff8\031" +
    "\ufff8\001\002\000\004\060\315\001\002\000\012\024\316" +
    "\025\317\026\321\027\322\001\002\000\006\030\ufff6\031" +
    "\ufff6\001\002\000\006\030\ufff5\031\ufff5\001\002\000\006" +
    "\030\ufff7\031\ufff7\001\002\000\006\030\ufff4\031\ufff4\001" +
    "\002\000\006\030\ufff3\031\ufff3\001\002\000\004\023\314" +
    "\001\002\000\012\006\ufffa\010\ufffa\023\ufffa\037\ufffa\001" +
    "\002\000\006\030\ufff9\031\ufff9\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\010\004\012" +
    "\015\013\100\011\001\001\000\004\032\310\001\001\000" +
    "\004\024\306\001\001\000\006\011\305\032\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\017\001\001\000\004\032\304\001\001\000\004" +
    "\016\021\001\001\000\004\010\022\001\001\000\002\001" +
    "\001\000\010\011\027\020\024\032\025\001\001\000\004" +
    "\024\046\001\001\000\002\001\001\000\006\012\033\013" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\037\001\001\000" +
    "\002\001\001\000\004\013\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\047\022" +
    "\051\026\050\001\001\000\002\001\001\000\006\025\264" +
    "\032\265\001\001\000\006\010\055\023\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\027\032\025\001\001\000\004\033\057\001\001\000" +
    "\024\034\062\035\074\036\101\037\075\042\072\044\070" +
    "\045\064\047\073\065\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\255\057\254\060\107\001\001\000" +
    "\004\066\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\050\221" +
    "\070\223\074\224\077\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\105\047\104\065\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\041\110\053\115\054\112\055\113" +
    "\057\114\060\107\001\001\000\010\061\207\062\146\065" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\056\125\071\136\072" +
    "\126\073\134\074\131\001\001\000\002\001\001\000\012" +
    "\054\112\055\117\057\114\060\107\001\001\000\002\001" +
    "\001\000\010\054\121\057\114\060\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\061\144\062\146\065\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\057\141\060\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\072\126\073\134" +
    "\074\131\001\001\000\004\032\176\001\001\000\002\001" +
    "\001\000\010\075\171\076\173\077\164\001\001\000\004" +
    "\063\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\057\152\060\107\001\001\000\002\001\001\000\010" +
    "\072\126\073\134\074\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\051\156\052\160\057\157\060\107" +
    "\001\001\000\002\001\001\000\010\072\126\073\134\074" +
    "\131\001\001\000\002\001\001\000\006\057\162\060\107" +
    "\001\001\000\010\072\126\073\134\074\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\062" +
    "\175\065\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\177\001" +
    "\001\000\002\001\001\000\006\057\201\060\107\001\001" +
    "\000\010\072\126\073\134\074\131\001\001\000\002\001" +
    "\001\000\010\040\204\047\104\065\076\001\001\000\002" +
    "\001\001\000\024\034\206\035\074\036\101\037\075\042" +
    "\072\044\070\045\064\047\073\065\076\001\001\000\002" +
    "\001\001\000\010\075\171\076\173\077\164\001\001\000" +
    "\006\057\211\060\107\001\001\000\012\046\213\072\126" +
    "\073\134\074\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\057\233\060\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\051\230\052\160\057" +
    "\157\060\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\072\126\073" +
    "\134\074\131\001\001\000\002\001\001\000\024\034\062" +
    "\035\074\036\101\037\075\042\072\044\070\045\064\047" +
    "\073\065\076\001\001\000\002\001\001\000\014\053\240" +
    "\054\112\055\113\057\114\060\107\001\001\000\002\001" +
    "\001\000\024\034\242\035\074\036\101\037\075\042\072" +
    "\044\070\045\064\047\073\065\076\001\001\000\002\001" +
    "\001\000\024\034\244\035\074\036\101\037\075\042\072" +
    "\044\070\045\064\047\073\065\076\001\001\000\002\001" +
    "\001\000\004\067\250\001\001\000\006\057\252\060\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\072\126\073\134\074\131\001\001\000\002" +
    "\001\001\000\010\072\126\073\134\074\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\270\001\001\000\002\001\001\000" +
    "\012\027\273\030\275\031\272\032\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\303\032\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\047\022\051\026\050\001\001\000\002\001\001\000" +
    "\006\005\311\006\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static int globalVarCount = 0;
	public static int mainVarCount = 0;
	public static int constCount = 0;
	public static int globalArrayVarCount = 0;
	public static boolean globalRange = false;
	public static boolean mainRange = false;

	private static boolean errorReported = false;
	private static final Logger logger = LogManager.getLogger(Parser.class);

	public static void main(String argv[]) {
		try(BufferedReader reader = new BufferedReader(new FileReader(argv[0]))){

				logger.info("Parsing source file: " + argv[0]);

				Lexer lexer = new Lexer(reader);
				Parser parser = new Parser(lexer);

				Symbol symbol = parser.parse();

				logger.info("============= Syntax analysis =============");
				logger.info("Global variables:" + parser.globalVarCount);
				logger.info("Local variables in main:" + parser.mainVarCount);
				logger.info("Global constants:" + parser.constCount);
				logger.info("Global arrays:" + parser.globalArrayVarCount);

				if(parser.errorReported){
					logger.info("Source file contains error(s)!");
				} else {
					logger.info("Source file successfully parsed!");
				}

		} catch (Exception e) {
				e.printStackTrace();
		}
	}

	public void syntax_error(Symbol symbol) {
			report_error("Syntax error:", symbol);
	}

	public void unrecovered_syntax_error(Symbol symbol) throws java.lang.Exception {
			report_fatal_error("Fatal error, stopping with parsing the file", symbol);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void report_error(String message, Object info) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder(message); 
		if (info instanceof Symbol){
			Symbol symbol = (Symbol) info;
			if(symbol.value != null){
				stringBuilder.append(" on line ").append(symbol.left)
					.append(", near token '").append(symbol.value.toString()).append("'");
			} else {
				stringBuilder.append(" on line ").append(symbol.left);
			}
		}
		logger.debug(stringBuilder.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // muloperatorright ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // muloperatorright ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // muloperatorright ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // muloperatorleft ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // muloperatorleft ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // muloperatorleft ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // muloperator ::= muloperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperator",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // muloperator ::= muloperatorleft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperator",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // addoperatorright ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // addoperatorright ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // addoperatorleft ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // addoperatorleft ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // addoperator ::= addoperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperator",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // addoperator ::= addoperatorleft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperator",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // reloperator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // reloperator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // reloperator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // reloperator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // reloperator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // reloperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignoperator ::= muloperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignoperator ::= addoperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // assignoperator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // identorexpr ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexpr",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // identorexpr ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexpr",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // identorexprlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexprlist",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // identorexprlist ::= identorexprlist identorexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexprlist",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // designator ::= IDENTIFIER identorexprlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // newexpressionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newexpressionopt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // newexpressionopt ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newexpressionopt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factoractparamsopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factoractparamsopt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factoractparamsopt ::= LPAREN actparametersopt RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factoractparamsopt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= NEW type newexpressionopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= designator factoractparamsopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term ::= term muloperator factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // minusopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minusopt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // minusopt ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minusopt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= minusopt term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression addoperator term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // conditionfactopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfactopt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // conditionfactopt ::= reloperator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfactopt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conditionfact ::= expression conditionfactopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfact",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conditionterm ::= conditionfact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conditionterm ::= conditionterm ANDAND conditionfact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condition ::= conditionterm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condition ::= condition OROR conditionterm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // actparameters ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // actparameters ::= actparameters COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // actparametersopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // actparametersopt ::= actparameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designatorstatementexpr ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // designatorstatementexpr ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // designatorstatementexpr ::= LPAREN actparametersopt RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // designatorstatementexpr ::= assignoperator error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.report_error("Error recovery done till ';' on line " + lleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // designatorstatementexpr ::= assignoperator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // designatorstatement ::= designator designatorstatementexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // integerliteralopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // integerliteralopt ::= COMMA INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // printstatement ::= PRINT LPAREN expression integerliteralopt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printstatement",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // readstatement ::= READ LPAREN designator RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstatement",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expressionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expressionopt ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // returnstatement ::= RETURN expressionopt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnstatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditionopt ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // designatorstatementopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // designatorstatementopt ::= designatorstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forstatement ::= FOR LPAREN designatorstatementopt SEMICOLON conditionopt SEMICOLON designatorstatementopt RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifelsestatement ::= IF LPAREN condition RPAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelsestatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ifstatement ::= IF LPAREN condition RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstatement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= printstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= readstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= returnstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= forstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= ifelsestatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= ifstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= designatorstatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // formalparameter ::= type IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formalparameter ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formalparameters ::= formalparameters COMMA formalparameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formalparameters ::= formalparameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formalparameteropt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formalparameteropt ::= formalparameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // methodbody ::= vardeclarations LBRACE statements RBRACE 
            {
              Object RESULT =null;
		 parser.mainRange = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodbody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // methodreturntype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // methodreturntype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // staticopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // staticopt ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // methodheader ::= staticopt methodreturntype IDENTIFIER NT$1 LPAREN formalparameteropt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 if(i.equals("main")) { parser.mainRange = true; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methoddeclaration ::= methodheader methodbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methoddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methoddeclarations ::= methoddeclarations methoddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classbodymethods ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classbodymethods ::= LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classbody ::= LBRACE vardeclarations classbodymethods RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // superopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // superopt ::= EXTENDS type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdeclaration ::= CLASS IDENTIFIER superopt classbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdeclaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // brackopt ::= 
            {
              Object RESULT =null;
		 
		if(parser.globalRange) { 
			parser.globalVarCount++; 
		} else if(parser.mainRange) {
			parser.mainVarCount++; 
		} 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackopt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // brackopt ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		 
		if(parser.globalRange) { 
			parser.globalArrayVarCount++; 
		} 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackopt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vardeclarator ::= IDENTIFIER brackopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardeclarators ::= vardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclarators",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vardeclarators ::= error COMMA vardeclarator 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(parser.globalRange) { 
			parser.report_error("Error recovery done till ',' on line " + lleft, null); 
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclarators",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vardeclarators ::= vardeclarators COMMA vardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclarators",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vardeclaration ::= type error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(parser.mainRange) {
			parser.report_error("Error recovery done till '{' on line " + lleft, null); 
		} else {
			parser.unrecovered_syntax_error(null); 
		} 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vardeclaration ::= type error SEMICOLON 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(parser.globalRange || parser.mainRange) { 
			parser.report_error("Error recovery done till ';' on line " + lleft, null); 
		} else {
			parser.unrecovered_syntax_error(null); 
		} 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vardeclaration ::= type vardeclarators SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vardeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclarations",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vardeclarations ::= vardeclarations vardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardeclarations",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constdeclarator ::= IDENTIFIER EQ literal 
            {
              Object RESULT =null;
		 parser.constCount++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constdeclarators ::= constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constdeclarators ::= constdeclarators COMMA constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constdeclaration ::= CONST type constdeclarators SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations classdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations NT$0 vardeclaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.globalRange = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.globalRange = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declarations constdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER declarations LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

