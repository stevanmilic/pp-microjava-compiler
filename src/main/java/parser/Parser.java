
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 04 23:05:31 CEST 2017
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.Lexer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.BufferedReader;
import java.io.FileReader;
import rs.etf.pp1.symboltable.concepts.*;
import symboltablext.SymbolTable;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import symboltablext.visitors.DumpSymbolTableVisitorExtended;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 04 23:05:31 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\010\000\002\002\004\000\002\072" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\102\002\000\002\004\007\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\103" +
    "\002\000\002\007\006\000\002\007\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\005\000\002\012\004\000\002\012\002\000\002" +
    "\104\002\000\002\013\006\000\002\013\005\000\002\013" +
    "\004\000\002\014\005\000\002\014\003\000\002\015\003" +
    "\000\002\015\005\000\002\016\004\000\002\016\002\000" +
    "\002\105\002\000\002\017\006\000\002\020\005\000\002" +
    "\020\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\004\000\002\023\005\000\002\025\004\000\002\025\002" +
    "\000\002\024\006\000\002\026\005\000\002\026\002\000" +
    "\002\032\004\000\002\032\002\000\002\027\004\000\002" +
    "\106\002\000\002\030\011\000\002\033\003\000\002\033" +
    "\002\000\002\101\003\000\002\101\003\000\002\031\006" +
    "\000\002\034\003\000\002\034\002\000\002\036\003\000" +
    "\002\036\005\000\002\035\004\000\002\035\006\000\002" +
    "\074\003\000\002\037\004\000\002\037\002\000\002\040" +
    "\004\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\004\000\002\040\004\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\005\000\002" +
    "\041\007\000\002\042\011\000\002\043\013\000\002\044" +
    "\003\000\002\044\002\000\002\045\003\000\002\045\002" +
    "\000\002\046\005\000\002\047\003\000\002\047\002\000" +
    "\002\050\007\000\002\051\010\000\002\052\004\000\002" +
    "\052\002\000\002\053\005\000\002\053\005\000\002\053" +
    "\006\000\002\053\004\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\002\000\002\056\005\000" +
    "\002\056\003\000\002\057\005\000\002\057\003\000\002" +
    "\061\005\000\002\061\003\000\002\060\003\000\002\060" +
    "\005\000\002\076\005\000\002\076\003\000\002\076\004" +
    "\000\002\075\005\000\002\075\003\000\002\077\003\000" +
    "\002\077\006\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\004\000\002\077\007\000\002\077" +
    "\005\000\002\073\003\000\002\073\005\000\002\073\006" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\064" +
    "\003\000\002\064\003\000\002\065\003\000\002\065\003" +
    "\000\002\066\003\000\002\066\003\000\002\067\003\000" +
    "\002\067\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\004\005\001\002\000\004\002\352\001" +
    "\002\000\004\023\007\001\002\000\014\003\ufffb\006\ufffb" +
    "\010\ufffb\023\ufffb\036\ufffb\001\002\000\014\003\uffff\006" +
    "\uffff\010\uffff\023\uffff\036\uffff\001\002\000\014\003\017" +
    "\006\021\010\022\023\020\036\012\001\002\000\014\003" +
    "\ufffc\006\ufffc\010\ufffc\023\ufffc\036\ufffc\001\002\000\012" +
    "\016\uffd0\022\uffd0\023\uffd0\037\uffd0\001\002\000\014\003" +
    "\ufffd\006\ufffd\010\ufffd\023\ufffd\036\ufffd\001\002\000\014" +
    "\003\ufffe\006\ufffe\010\ufffe\023\ufffe\036\ufffe\001\002\000" +
    "\004\036\061\001\002\000\006\003\ufff2\023\ufff2\001\002" +
    "\000\004\027\044\001\002\000\066\003\uffc1\023\uffc1\027" +
    "\uffc1\030\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000\004\023" +
    "\040\001\002\000\004\023\020\001\002\000\004\023\ufffa" +
    "\001\002\000\004\023\027\001\002\000\006\027\036\030" +
    "\035\001\002\000\006\027\ufff7\030\ufff7\001\002\000\004" +
    "\057\030\001\002\000\010\024\031\025\032\026\034\001" +
    "\002\000\006\027\ufff5\030\ufff5\001\002\000\006\027\ufff4" +
    "\030\ufff4\001\002\000\006\027\ufff6\030\ufff6\001\002\000" +
    "\006\027\ufff3\030\ufff3\001\002\000\004\023\027\001\002" +
    "\000\014\003\ufff9\006\ufff9\010\ufff9\023\ufff9\036\ufff9\001" +
    "\002\000\006\027\ufff8\030\ufff8\001\002\000\006\020\041" +
    "\036\uffd5\001\002\000\004\023\020\001\002\000\004\036" +
    "\uffd7\001\002\000\004\036\uffd6\001\002\000\014\003\ufff0" +
    "\006\ufff0\010\ufff0\023\ufff0\036\ufff0\001\002\000\006\003" +
    "\046\023\047\001\002\000\004\030\057\001\002\000\010" +
    "\027\uffec\030\uffec\034\055\001\002\000\006\027\uffed\030" +
    "\uffed\001\002\000\006\027\053\030\052\001\002\000\004" +
    "\023\047\001\002\000\014\003\ufff1\006\ufff1\010\ufff1\023" +
    "\ufff1\036\ufff1\001\002\000\006\027\uffef\030\uffef\001\002" +
    "\000\004\035\056\001\002\000\006\027\uffeb\030\uffeb\001" +
    "\002\000\004\023\047\001\002\000\006\027\uffee\030\uffee" +
    "\001\002\000\010\023\uffdf\036\uffdf\037\uffdf\001\002\000" +
    "\014\003\uffd8\006\uffd8\010\uffd8\023\uffd8\036\uffd8\001\002" +
    "\000\010\023\020\036\064\037\uffd2\001\002\000\012\016" +
    "\uffd0\022\uffd0\023\uffd0\037\uffd0\001\002\000\004\037\101" +
    "\001\002\000\004\023\uffde\001\002\000\010\023\uffe0\036" +
    "\uffe0\037\uffe0\001\002\000\004\023\072\001\002\000\006" +
    "\027\uffdb\030\uffdb\001\002\000\010\027\uffda\030\uffda\034" +
    "\077\001\002\000\006\027\075\030\074\001\002\000\004" +
    "\023\072\001\002\000\010\023\uffdd\036\uffdd\037\uffdd\001" +
    "\002\000\006\027\uffdc\030\uffdc\001\002\000\004\035\100" +
    "\001\002\000\006\027\uffd9\030\uffd9\001\002\000\014\003" +
    "\uffd4\006\uffd4\010\uffd4\023\uffd4\036\uffd4\001\002\000\012" +
    "\016\uffcb\022\106\023\uffcb\037\107\001\002\000\012\016" +
    "\uffd1\022\uffd1\023\uffd1\037\uffd1\001\002\000\006\016\332" +
    "\023\020\001\002\000\006\023\uffe9\036\uffe9\001\002\000" +
    "\006\016\uffcc\023\uffcc\001\002\000\004\037\uffd3\001\002" +
    "\000\012\016\uffcf\022\uffcf\023\uffcf\037\uffcf\001\002\000" +
    "\006\023\020\036\112\001\002\000\026\005\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\023\uffbf\036" +
    "\uffbf\037\uffbf\001\002\000\006\003\116\023\uffe8\001\002" +
    "\000\006\023\uffea\036\uffea\001\002\000\004\023\121\001" +
    "\002\000\010\023\uffe5\027\117\036\uffe5\001\002\000\006" +
    "\023\uffe6\036\uffe6\001\002\000\006\027\uffe3\030\uffe3\001" +
    "\002\000\010\027\uffe2\030\uffe2\034\126\001\002\000\006" +
    "\027\124\030\123\001\002\000\004\023\121\001\002\000" +
    "\006\023\uffe7\036\uffe7\001\002\000\006\027\uffe4\030\uffe4" +
    "\001\002\000\004\035\127\001\002\000\006\027\uffe1\030" +
    "\uffe1\001\002\000\026\005\150\011\140\013\151\014\131" +
    "\015\136\017\153\021\132\023\137\036\142\037\134\001" +
    "\002\000\004\032\324\001\002\000\004\027\323\001\002" +
    "\000\026\005\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\021\uffc0\023\uffc0\036\uffc0\037\uffc0\001\002\000\012" +
    "\016\uffc8\022\uffc8\023\uffc8\037\uffc8\001\002\000\030\005" +
    "\uffb6\007\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6" +
    "\021\uffb6\023\uffb6\036\uffb6\037\uffb6\001\002\000\022\012" +
    "\162\023\137\024\175\025\173\026\164\027\uffab\032\174" +
    "\041\160\001\002\000\072\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\033\uff89\034\uff89\035\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89" +
    "\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\001\002\000" +
    "\004\032\312\001\002\000\030\005\uffb7\007\uffb7\011\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\017\uffb7\021\uffb7\023\uffb7\036" +
    "\uffb7\037\uffb7\001\002\000\026\005\uffbf\011\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\017\uffbf\021\uffbf\023\uffbf\036\uffbf\037" +
    "\uffbf\001\002\000\030\005\uffb8\007\uffb8\011\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\021\uffb8\023\uffb8\036\uffb8\037" +
    "\uffb8\001\002\000\004\027\307\001\002\000\030\005\uffbd" +
    "\007\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021" +
    "\uffbd\023\uffbd\036\uffbd\037\uffbd\001\002\000\030\005\uffbb" +
    "\007\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\021" +
    "\uffbb\023\uffbb\036\uffbb\037\uffbb\001\002\000\030\031\236" +
    "\032\301\034\234\045\274\046\302\057\300\060\177\061" +
    "\203\062\211\063\212\064\220\001\002\000\004\027\272" +
    "\001\002\000\004\032\263\001\002\000\030\005\uffbc\007" +
    "\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc" +
    "\023\uffbc\036\uffbc\037\uffbc\001\002\000\004\032\154\001" +
    "\002\000\006\023\137\027\uffb0\001\002\000\006\027\uffb1" +
    "\033\uffb1\001\002\000\004\027\157\001\002\000\022\012" +
    "\162\023\137\024\175\025\173\026\164\027\uffae\032\174" +
    "\041\160\001\002\000\016\012\162\023\137\024\175\025" +
    "\173\026\164\032\174\001\002\000\004\027\256\001\002" +
    "\000\004\023\020\001\002\000\006\027\uffaf\056\250\001" +
    "\002\000\056\027\uff8d\030\uff8d\033\uff8d\035\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000\056\027" +
    "\uff95\030\uff95\033\uff95\035\uff95\040\uff95\041\uff95\042\213" +
    "\043\216\044\214\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\060\uff95\061\uff95\062\211" +
    "\063\212\064\220\001\002\000\064\027\uff91\030\uff91\031" +
    "\236\032\235\033\uff91\034\234\035\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\060\uff91\061\uff91" +
    "\062\uff91\063\uff91\064\uff91\001\002\000\012\027\uff99\033" +
    "\uff99\055\uff99\056\uff99\001\002\000\036\027\uff98\033\uff98" +
    "\040\201\041\204\047\224\050\226\051\227\052\231\053" +
    "\225\054\232\055\uff98\056\uff98\060\177\061\203\001\002" +
    "\000\056\027\uff92\030\uff92\033\uff92\035\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\047\uff92\050\uff92\051\uff92" +
    "\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\001\002\000\012\027\uff9b" +
    "\033\uff9b\055\222\056\uff9b\001\002\000\056\027\uff8e\030" +
    "\uff8e\033\uff8e\035\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\001\002\000\020\012\162\023\137\024\175\025" +
    "\173\026\164\032\174\041\160\001\002\000\056\027\uff8f" +
    "\030\uff8f\033\uff8f\035\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\001\002\000\014\033\200\040\201\041\204" +
    "\060\177\061\203\001\002\000\022\003\uff78\012\uff78\023" +
    "\uff78\024\uff78\025\uff78\026\uff78\032\uff78\041\uff78\001\002" +
    "\000\056\027\uff8a\030\uff8a\033\uff8a\035\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\060\uff8a\061" +
    "\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002\000\016\012\uff7b" +
    "\023\uff7b\024\uff7b\025\uff7b\026\uff7b\032\uff7b\001\002\000" +
    "\016\012\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\032\uff7d" +
    "\001\002\000\022\003\uff79\012\uff79\023\uff79\024\uff79\025" +
    "\uff79\026\uff79\032\uff79\041\uff79\001\002\000\016\012\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\032\uff7a\001\002\000" +
    "\016\012\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\032\uff7c" +
    "\001\002\000\016\012\162\023\137\024\175\025\173\026" +
    "\164\032\174\001\002\000\056\027\uff96\030\uff96\033\uff96" +
    "\035\uff96\040\uff96\041\uff96\042\213\043\216\044\214\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\056\uff96\060\uff96\061\uff96\062\211\063\212\064\220\001" +
    "\002\000\016\012\uff76\023\uff76\024\uff76\025\uff76\026\uff76" +
    "\032\uff76\001\002\000\022\003\uff70\012\uff70\023\uff70\024" +
    "\uff70\025\uff70\026\uff70\032\uff70\041\uff70\001\002\000\022" +
    "\003\uff71\012\uff71\023\uff71\024\uff71\025\uff71\026\uff71\032" +
    "\uff71\041\uff71\001\002\000\016\012\uff75\023\uff75\024\uff75" +
    "\025\uff75\026\uff75\032\uff75\001\002\000\016\012\uff73\023" +
    "\uff73\024\uff73\025\uff73\026\uff73\032\uff73\001\002\000\016" +
    "\012\162\023\137\024\175\025\173\026\164\032\174\001" +
    "\002\000\016\012\uff74\023\uff74\024\uff74\025\uff74\026\uff74" +
    "\032\uff74\001\002\000\016\012\uff77\023\uff77\024\uff77\025" +
    "\uff77\026\uff77\032\uff77\001\002\000\022\003\uff72\012\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\032\uff72\041\uff72\001" +
    "\002\000\056\027\uff93\030\uff93\033\uff93\035\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\060\uff93" +
    "\061\uff93\062\uff93\063\uff93\064\uff93\001\002\000\020\012" +
    "\162\023\137\024\175\025\173\026\164\032\174\041\160" +
    "\001\002\000\012\027\uff9a\033\uff9a\055\uff9a\056\uff9a\001" +
    "\002\000\020\012\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\032\uff83\041\uff83\001\002\000\020\012\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\032\uff80\041\uff80\001\002\000\020" +
    "\012\uff82\023\uff82\024\uff82\025\uff82\026\uff82\032\uff82\041" +
    "\uff82\001\002\000\020\012\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\032\uff81\041\uff81\001\002\000\020\012\162\023" +
    "\137\024\175\025\173\026\164\032\174\041\160\001\002" +
    "\000\020\012\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\032" +
    "\uff7f\041\uff7f\001\002\000\020\012\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\032\uff7e\041\uff7e\001\002\000\022\027" +
    "\uff97\033\uff97\040\201\041\204\055\uff97\056\uff97\060\177" +
    "\061\203\001\002\000\020\012\162\023\137\024\175\025" +
    "\173\026\164\032\174\041\160\001\002\000\022\012\162" +
    "\023\137\024\175\025\173\026\164\032\174\033\uff9f\041" +
    "\160\001\002\000\004\023\237\001\002\000\072\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88" +
    "\064\uff88\001\002\000\004\033\245\001\002\000\016\030" +
    "\uff9d\033\uff9d\040\201\041\204\060\177\061\203\001\002" +
    "\000\006\030\243\033\uffa0\001\002\000\020\012\162\023" +
    "\137\024\175\025\173\026\164\032\174\041\160\001\002" +
    "\000\016\030\uff9e\033\uff9e\040\201\041\204\060\177\061" +
    "\203\001\002\000\056\027\uff90\030\uff90\033\uff90\035\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\001\002\000" +
    "\014\035\247\040\201\041\204\060\177\061\203\001\002" +
    "\000\072\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\001\002\000\020\012\162\023" +
    "\137\024\175\025\173\026\164\032\174\041\160\001\002" +
    "\000\012\027\uff9c\033\uff9c\055\222\056\uff9c\001\002\000" +
    "\060\027\uff8c\030\uff8c\033\uff8c\034\253\035\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\044\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\064\uff8c\001\002\000\020\012" +
    "\162\023\137\024\175\025\173\026\164\032\174\041\160" +
    "\001\002\000\014\035\255\040\201\041\204\060\177\061" +
    "\203\001\002\000\056\027\uff8b\030\uff8b\033\uff8b\035\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\001\002\000" +
    "\006\023\137\033\uffb0\001\002\000\004\033\260\001\002" +
    "\000\024\005\150\011\140\013\151\014\131\015\136\017" +
    "\153\021\132\023\137\036\142\001\002\000\030\005\uffb2" +
    "\007\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\021" +
    "\uffb2\023\uffb2\036\uffb2\037\uffb2\001\002\000\056\027\uff94" +
    "\030\uff94\033\uff94\035\uff94\040\uff94\041\uff94\042\213\043" +
    "\216\044\214\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\060\uff94\061\uff94\062\211\063" +
    "\212\064\220\001\002\000\020\012\162\023\137\024\175" +
    "\025\173\026\164\032\174\041\160\001\002\000\016\030" +
    "\265\033\uffa7\040\201\041\204\060\177\061\203\001\002" +
    "\000\004\024\271\001\002\000\004\033\267\001\002\000" +
    "\004\027\270\001\002\000\030\005\uffa9\007\uffa9\011\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\017\uffa9\021\uffa9\023\uffa9\036" +
    "\uffa9\037\uffa9\001\002\000\004\033\uffa8\001\002\000\030" +
    "\005\uffba\007\uffba\011\uffba\013\uffba\014\uffba\015\uffba\017" +
    "\uffba\021\uffba\023\uffba\036\uffba\037\uffba\001\002\000\022" +
    "\003\uff84\012\uff84\023\uff84\024\uff84\025\uff84\026\uff84\032" +
    "\uff84\041\uff84\001\002\000\006\027\uffa2\033\uffa2\001\002" +
    "\000\006\027\uffa3\033\uffa3\001\002\000\022\003\306\012" +
    "\162\023\137\024\175\025\173\026\164\032\174\041\160" +
    "\001\002\000\022\003\uff85\012\uff85\023\uff85\024\uff85\025" +
    "\uff85\026\uff85\032\uff85\041\uff85\001\002\000\022\003\uff86" +
    "\012\uff86\023\uff86\024\uff86\025\uff86\026\uff86\032\uff86\041" +
    "\uff86\001\002\000\022\012\162\023\137\024\175\025\173" +
    "\026\164\032\174\033\uff9f\041\160\001\002\000\006\027" +
    "\uffa1\033\uffa1\001\002\000\004\033\304\001\002\000\006" +
    "\027\uffa4\033\uffa4\001\002\000\016\027\uffa6\033\uffa6\040" +
    "\201\041\204\060\177\061\203\001\002\000\006\027\uffa5" +
    "\033\uffa5\001\002\000\030\005\uffbe\007\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\023\uffbe\036\uffbe" +
    "\037\uffbe\001\002\000\026\005\150\011\140\013\151\014" +
    "\131\015\136\017\153\021\132\023\137\036\142\037\311" +
    "\001\002\000\030\005\uffb5\007\uffb5\011\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\017\uffb5\021\uffb5\023\uffb5\036\uffb5\037\uffb5" +
    "\001\002\000\020\012\162\023\137\024\175\025\173\026" +
    "\164\032\174\041\160\001\002\000\006\033\314\056\250" +
    "\001\002\000\024\005\150\011\140\013\151\014\131\015" +
    "\136\017\153\021\132\023\137\036\142\001\002\000\030" +
    "\005\uffb4\007\316\011\uffb4\013\uffb4\014\uffb4\015\uffb4\017" +
    "\uffb4\021\uffb4\023\uffb4\036\uffb4\037\uffb4\001\002\000\024" +
    "\005\150\011\140\013\151\014\131\015\136\017\153\021" +
    "\132\023\137\036\142\001\002\000\030\005\uffb3\007\uffb3" +
    "\011\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\021\uffb3\023" +
    "\uffb3\036\uffb3\037\uffb3\001\002\000\014\027\uffac\040\201" +
    "\041\204\060\177\061\203\001\002\000\004\027\322\001" +
    "\002\000\030\005\uffad\007\uffad\011\uffad\013\uffad\014\uffad" +
    "\015\uffad\017\uffad\021\uffad\023\uffad\036\uffad\037\uffad\001" +
    "\002\000\030\005\uffb9\007\uffb9\011\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\017\uffb9\021\uffb9\023\uffb9\036\uffb9\037\uffb9\001" +
    "\002\000\004\023\137\001\002\000\010\031\236\033\326" +
    "\034\234\001\002\000\004\027\327\001\002\000\030\005" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa" +
    "\021\uffaa\023\uffaa\036\uffaa\037\uffaa\001\002\000\004\023" +
    "\333\001\002\000\004\023\uffc9\001\002\000\004\023\uffca" +
    "\001\002\000\004\032\uffce\001\002\000\004\032\335\001" +
    "\002\000\006\023\020\033\uffc6\001\002\000\006\030\346" +
    "\033\uffc7\001\002\000\004\033\345\001\002\000\004\023" +
    "\342\001\002\000\006\030\uffc5\033\uffc5\001\002\000\010" +
    "\030\uffc3\033\uffc3\034\343\001\002\000\004\035\344\001" +
    "\002\000\006\030\uffc2\033\uffc2\001\002\000\006\023\uffcd" +
    "\036\uffcd\001\002\000\004\023\020\001\002\000\006\030" +
    "\uffc4\033\uffc4\001\002\000\012\016\uffcb\022\106\023\uffcb" +
    "\037\351\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\072\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\014\004\013\007\012\022\010\023\014\074" +
    "\015\001\001\000\002\001\001\000\004\032\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\061\001" +
    "\001\000\004\103\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\022\001\001\000" +
    "\004\102\023\001\001\000\006\005\024\006\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\041" +
    "\001\001\000\004\074\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\050\011\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\057\001\001\000\002\001\001\000\004" +
    "\016\062\001\001\000\002\001\001\000\010\017\066\026" +
    "\064\074\065\001\001\000\004\032\101\001\001\000\002" +
    "\001\001\000\004\105\067\001\001\000\002\001\001\000" +
    "\006\020\072\021\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\102\030\104\033" +
    "\103\001\001\000\002\001\001\000\006\074\330\101\327" +
    "\001\001\000\006\012\110\031\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\113" +
    "\074\112\001\001\000\004\037\127\001\001\000\004\104" +
    "\114\001\001\000\002\001\001\000\006\014\121\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\132\041\144\042\151" +
    "\043\145\046\142\050\140\051\134\053\143\073\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\047\320\073" +
    "\165\075\164\076\317\077\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\274\062\275\066\276\071" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\155\053\154\073" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\045\160\057\162\060\166\061\171\073\165\075\164\076" +
    "\167\077\170\001\001\000\010\073\165\075\261\077\170" +
    "\001\001\000\002\001\001\000\004\074\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\067\214\070\216" +
    "\071\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\063\227\064\205\065\201\066\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\073" +
    "\165\075\164\076\175\077\170\001\001\000\002\001\001" +
    "\000\010\064\205\065\201\066\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\073\165\075\206\077\170\001\001\000\010\067\214" +
    "\070\216\071\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\073\165\077\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\060\222\073\165\075\164\076\167\077\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\073\165\075\164\076" +
    "\232\077\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\064\205\065\201\066\204\001\001\000\012\073" +
    "\165\075\164\076\245\077\170\001\001\000\016\055\237" +
    "\056\241\073\165\075\164\076\240\077\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\064\205\065\201\066\204\001\001\000\002\001\001\000" +
    "\012\073\165\075\164\076\243\077\170\001\001\000\010" +
    "\064\205\065\201\066\204\001\001\000\002\001\001\000" +
    "\010\064\205\065\201\066\204\001\001\000\002\001\001" +
    "\000\016\060\166\061\250\073\165\075\164\076\167\077" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\073\165\075\164\076\253\077\170\001\001\000\010\064" +
    "\205\065\201\066\204\001\001\000\002\001\001\000\010" +
    "\044\256\053\154\073\146\001\001\000\002\001\001\000" +
    "\024\040\260\041\144\042\151\043\145\046\142\050\140" +
    "\051\134\053\143\073\146\001\001\000\002\001\001\000" +
    "\010\067\214\070\216\071\207\001\001\000\012\073\165" +
    "\075\164\076\263\077\170\001\001\000\012\052\265\064" +
    "\205\065\201\066\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\073\165\075\164\076\304\077" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\055\302\056\241\073\165\075\164\076\240\077\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\064\205\065\201\066\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\132\041\144\042\151" +
    "\043\145\046\142\050\140\051\134\053\143\073\146\001" +
    "\001\000\002\001\001\000\020\057\312\060\166\061\171" +
    "\073\165\075\164\076\167\077\170\001\001\000\002\001" +
    "\001\000\024\040\314\041\144\042\151\043\145\046\142" +
    "\050\140\051\134\053\143\073\146\001\001\000\002\001" +
    "\001\000\024\040\316\041\144\042\151\043\145\046\142" +
    "\050\140\051\134\053\143\073\146\001\001\000\002\001" +
    "\001\000\010\064\205\065\201\066\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\333\001\001\000\002\001\001\000\012" +
    "\034\336\035\340\036\335\074\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\346\074\337\001\001\000\002" +
    "\001\001\000\010\027\102\030\104\033\103\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	SymbolTable.init();

    }



	public static int globalVarCount = 0;
	public static int mainVarCount = 0;
	public static int constCount = 0;
	public static int globalArrayVarCount = 0;

	private static boolean errorReported = false;

	public static final Logger logger = LogManager.getLogger(Parser.class);

	public static void main(String argv[]) {
		try(BufferedReader reader = new BufferedReader(new FileReader(argv[0]))){

				logger.info("Parsing source file: " + argv[0]);

				Lexer lexer = new Lexer(reader);
				Parser parser = new Parser(lexer);

				logger.info("============= Semantic analysis =============");

				Symbol symbol = parser.parse();

				logger.info("============= Syntax analysis ===============");
				logger.info("Global variables:" + parser.globalVarCount);
				logger.info("Local variables in main:" + parser.mainVarCount);
				logger.info("Global constants:" + parser.constCount);
				logger.info("Global arrays:" + parser.globalArrayVarCount);

				if(parser.errorReported){
					logger.info("Source file contains error(s)!");
				} else {
					logger.info("Source file successfully parsed!");
				}

				SymbolTable.dump();

		} catch (Exception e) {
				e.printStackTrace();
		}
	}

	public static Struct newArrayType(Struct type) {
			return new Struct(Struct.Array, type);
	}

	public static Struct newClassType() {
			return new Struct(Struct.Class);
	}

	public static String visitNode(Obj node){
		 SymbolTableVisitor symbolTableVisitor= new DumpSymbolTableVisitorExtended();
		 node.accept(symbolTableVisitor);
		 return symbolTableVisitor.getOutput();
	}

	public static Obj findInScope(String symbolName) {
			Obj resultObj = SymbolTable.currentScope.findSymbol(symbolName);
			return (resultObj != null) ? resultObj : SymbolTable.noObj;
	}

	public static boolean isMain(Obj obj) {
			if(obj != null && obj.getKind() == Obj.Meth && obj.getName().equals("main")) {
					return true;
			}
			return false;
	}

	public static boolean isVoid(Obj obj) {
			if(obj != null && obj.getKind() == Obj.Meth && obj.getType() == SymbolTable.noType) {
					return true;
			}
			return false;
	}

	public void syntax_error(Symbol symbol) {
			report_error("Syntax error:", symbol);
	}

	public void unrecovered_syntax_error(Symbol symbol) throws java.lang.Exception {
			report_fatal_error("Fatal error: stopping with parsing the file", symbol);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void report_error(String message, Object info) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder(message); 
		if (info instanceof Symbol){
			Symbol symbol = (Symbol) info;
			if(symbol.value != null){
				stringBuilder.append(" on line ").append(symbol.left)
					.append(", near token '").append(symbol.value.toString()).append("'");
			} else {
				stringBuilder.append(" on line ").append(symbol.left);
			}
		}
		logger.error(stringBuilder.toString());
	}

	public void report_semantic_error(String message, int line) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder("Semantic error:"); 
		if(message != null){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(", reason: ").append(message);
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.error(stringBuilder.toString());
	}

	public void report_debug(String message, Object info, int line) {
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" till token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.debug(stringBuilder.toString());
	}

	public void report_info(String message, Object info, int line) {
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" with token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.info(stringBuilder.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	Struct currentType = SymbolTable.noType;
	Obj currentExpression = null;
	Obj currentTerm = null;
	Obj currentFactor = null;
	Obj currentClass = null;
	Obj currentMethod = null;
	boolean returnStatementExists = false;
	boolean mainDefined = false;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // muloperatorright ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // muloperatorright ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // muloperatorright ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // muloperatorleft ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // muloperatorleft ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // muloperatorleft ::= MULT 
            {
              Object RESULT =null;
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // muloperator ::= muloperatorright 
            {
              Object RESULT =null;
		int muloperatorrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muloperatorrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object muloperatorright = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(currentTerm == null){
			parser.report_semantic_error("Left side must be assigned to variable, class field or array element", muloperatorrightleft);
		} else if(currentTerm.getKind() != Obj.Var && currentTerm.getKind() != Obj.Fld) {
			parser.report_semantic_error("'" + currentTerm.getName() + "' must be a variable, class field or array element", muloperatorrightleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // muloperator ::= muloperatorleft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperator",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // addoperatorright ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // addoperatorright ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // addoperatorleft ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // addoperatorleft ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // addoperator ::= addoperatorright 
            {
              Object RESULT =null;
		int addoperatorrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addoperatorrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addoperatorright = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(currentExpression == null){
			parser.report_semantic_error("Left side must be assigned to variable, class field or array element", addoperatorrightleft);
		} else if(currentExpression.getKind() != Obj.Var && currentExpression.getKind() != Obj.Fld) {
			parser.report_semantic_error("'" + currentExpression.getName() + "' must be a variable, class field or array element", addoperatorrightleft);
		}
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperator",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // addoperator ::= addoperatorleft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperator",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // reloperator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // reloperator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // reloperator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // reloperator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // reloperator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // reloperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assignoperator ::= muloperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // assignoperator ::= addoperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // assignoperator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // designator ::= designator LBRACK expression RBRACK 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(designator.getType().getKind() == Struct.Array) {
			if(expression.getKind() == Struct.Int) {
				parser.report_info("Array access", designator.getName(), designatorleft);
			} else {
				parser.report_semantic_error("Expression isn't an int type", expressionleft);
			}
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must represent an array", designatorleft);
		}
		RESULT = designator;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // designator ::= designator DOT IDENTIFIER 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int classmemberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classmemberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String classmember = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(designator.getType().getKind() == Struct.Class) {
			parser.report_info("Field acces", designator.getName(), designatorleft);
			//TO DO: ident must be a field or a method of given class
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must represent a class", designatorleft);
		}
		RESULT = SymbolTable.noObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // designator ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj object = SymbolTable.find(name);
		if(object == SymbolTable.noObj) {
			parser.report_semantic_error("'" + name + "' not declared", nameleft);
		} else if(object.getKind() == Obj.Var || object.getKind() == Obj.Con) {
			parser.report_info("'" + name + "' found", parser.visitNode(object), nameleft);
		}
		RESULT = object;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= LPAREN expression RPAREN 
            {
              Struct RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		currentFactor = currentExpression;
		RESULT = expression;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= NEW type LBRACK expression RBRACK 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(expression.getKind() != Struct.Int) {
			parser.report_semantic_error("Expression isn't an int type", expressionleft);
		}
		currentFactor = null;
		RESULT = type;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= NEW type 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(type.getKind() != Struct.Class) {
			parser.report_semantic_error("Type ins't an inner defined class", typeleft);
		}
		currentFactor = null;
		RESULT = type;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= BOOL_LITERAL 
            {
              Struct RESULT =null;
		
		currentFactor = null;
		RESULT = SymbolTable.boolType;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor ::= CHAR_LITERAL 
            {
              Struct RESULT =null;
		
		currentFactor = null;
		RESULT = SymbolTable.charType;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= INTEGER_LITERAL 
            {
              Struct RESULT =null;
		
		currentFactor = null;
		RESULT = SymbolTable.intType;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= designator LPAREN actparametersopt RPAREN 
            {
              Struct RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj method = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(Obj.Meth == method.getKind()) {
			parser.report_info("Method call", method.getName(), methodleft);
			RESULT = method.getType();
		} else {
			parser.report_error("'" + method.getName() + "' must be a method", methodleft);
			RESULT = SymbolTable.noType;
		}
		currentFactor = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= designator 
            {
              Struct RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		currentFactor = designator;
		RESULT = designator.getType();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // term ::= factor 
            {
              Struct RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct factor = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		currentTerm = currentFactor;
		RESULT = factor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= term muloperator factor 
            {
              Struct RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct term = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct factor = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(term.getKind() != Struct.Int || !term.equals(factor)){
			parser.report_semantic_error("Terminal and factor differ in type or not int type", termleft);
		}
		RESULT = term;	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= MINUS term 
            {
              Struct RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct term = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(term.getKind() != Struct.Int) {
			parser.report_semantic_error("Terminal isn't an int type", termleft);
		}
		currentExpression = currentTerm;
		RESULT = term;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= term 
            {
              Struct RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct term = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		currentExpression = currentTerm;
		RESULT = term;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression addoperator term 
            {
              Struct RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct term = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(expression.getKind() != Struct.Int || !expression.compatibleWith(term)){
			parser.report_semantic_error("Expression and terminal differ in type or not int type", expressionleft);
		}
		RESULT = expression;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conditionfact ::= expression reloperator expression 
            {
              Object RESULT =null;
		int expressionlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct expressionl = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expressionr = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(!expressionl.compatibleWith(expressionr)){
			parser.report_semantic_error("Expressions are not compatible", expressionrleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfact",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conditionfact ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfact",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditionterm ::= conditionfact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conditionterm ::= conditionterm ANDAND conditionfact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condition ::= conditionterm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condition ::= condition OROR conditionterm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // actparameters ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // actparameters ::= actparameters COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // actparametersopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // actparametersopt ::= actparameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // designatoroperatoropt ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatoroperatoropt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // designatoroperatoropt ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatoroperatoropt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // designatorstatement ::= designator designatoroperatoropt 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(designator.getKind() != Obj.Var && designator.getKind() != Obj.Fld) {
			parser.report_semantic_error("'" + designator.getName() + "' must be a variable, class field or array element", designatorleft);
		}
		if(designator.getType().getKind() != Struct.Int) {
			parser.report_semantic_error("'" + designator.getName() + "' must be an int type", designatorleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // designatorstatement ::= designator LPAREN actparametersopt RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // designatorstatement ::= designator assignoperator error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		parser.report_debug("Error recovery done", null, eleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // designatorstatement ::= designator assignoperator expression 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(designator.getKind() != Obj.Var && designator.getKind() != Obj.Fld) {
			parser.report_semantic_error("'" + designator.getName() + "' must be a variable, class field or array element", designatorleft);
		}
		Struct designatorType = designator.getType().getKind() == Struct.Array ? designator.getType().getElemType() : designator.getType();
		if(!expression.assignableTo(designatorType)) {
			parser.report_semantic_error("Expression type must be assignable with '" + designator.getName() + "'", expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // integerliteralopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // integerliteralopt ::= COMMA INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // printstatement ::= PRINT LPAREN expression integerliteralopt RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		if(expression.getKind() != Struct.Int) {
			parser.report_semantic_error("Expression isn't an int type", expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printstatement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // readstatement ::= READ LPAREN designator RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(designator.getKind() != Obj.Var && designator.getKind() != Obj.Fld) {
			parser.report_semantic_error("'" + designator.getName() + "' must be a variable, class field or array element", designatorleft);
		}
		if(designator.getType().getKind() != Struct.Int) {
			parser.report_semantic_error("'" + designator.getName() + "' must be an int type", designatorleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstatement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expressionopt ::= 
            {
              Object RESULT =null;
		
		returnStatementExists = true;
		if(!parser.isVoid(currentMethod)) {
			parser.report_semantic_error("Method must have a return statement with expression", 0);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expressionopt ::= expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct expression = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		returnStatementExists = true;	
		if(parser.isVoid(currentMethod)) {
			parser.report_semantic_error("Method can't have a return statement with expression, declared void", expressionleft);
		} else if(!expression.equals(currentMethod.getType())){
			parser.report_semantic_error("Return expression doesn't match method return type", expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // returnstatement ::= RETURN expressionopt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnstatement",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conditionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conditionopt ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // designatorstatementopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designatorstatementopt ::= designatorstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forstatement ::= FOR LPAREN designatorstatementopt SEMICOLON conditionopt SEMICOLON designatorstatementopt RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ifelsestatement ::= IF LPAREN condition RPAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelsestatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ifstatement ::= IF LPAREN condition RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= printstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= readstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= returnstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= forstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= ifelsestatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= ifstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= designatorstatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= IDENTIFIER 
            {
              Struct RESULT =null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj typeNode = SymbolTable.find(typename);
		if (typeNode == SymbolTable.noObj) {
			parser.report_semantic_error("Type not found in symbol table '" + typename + "'", typenameleft);
			RESULT = SymbolTable.noType;
		} else if(Obj.Type == typeNode.getKind()) {
			RESULT = typeNode.getType();
		} else {
			parser.report_semantic_error("'" + typename + "' doesn't represent a type", typenameleft);
			RESULT = SymbolTable.noType;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // formalparameter ::= type IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // formalparameter ::= type IDENTIFIER 
            {
              Object RESULT =null;
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // formalparameters ::= formalparameters COMMA formalparameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formalparameters ::= formalparameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formalparameteropt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formalparameteropt ::= formalparameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // methodbody ::= localvardeclarations LBRACE statements RBRACE 
            {
              Object RESULT =null;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(!parser.isVoid(currentMethod) && !returnStatementExists) {
			parser.report_semantic_error("Method must have a return statement, declared as non void type", rbraceleft);
		}
		SymbolTable.chainLocalSymbols(currentMethod);
		SymbolTable.closeScope();
		returnStatementExists = false;
		currentMethod = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodbody",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // methodreturntype ::= type 
            {
              Struct RESULT =null;
		int returntypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int returntyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct returntype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = returntype;	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // methodreturntype ::= VOID 
            {
              Struct RESULT =null;
		
		RESULT = SymbolTable.noType;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // staticopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // staticopt ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // methodheader ::= staticopt methodreturntype IDENTIFIER NT$4 LPAREN formalparameteropt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int methodreturntypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int methodreturntyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Struct methodreturntype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int methodnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int methodnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String methodname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		if(parser.isMain(currentMethod)) {
			if(parser.isVoid(currentMethod)){
				mainDefined = true;
			} else {
				parser.report_semantic_error("Main method must be void type", methodreturntypeleft);
			}
		} 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT =null;
		int methodreturntypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodreturntyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct methodreturntype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int methodnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methodnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String methodname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		currentMethod = SymbolTable.insert(Obj.Meth, methodname, methodreturntype);
		SymbolTable.openScope();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // methoddeclaration ::= methodheader methodbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // methoddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // methoddeclarations ::= methoddeclarations methoddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // classbodymethods ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // classbodymethods ::= LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // classbody ::= LBRACE classfielddeclarations classbodymethods RBRACE 
            {
              Object RESULT =null;
		
		SymbolTable.chainLocalSymbols(currentClass.getType());
		SymbolTable.closeScope();
		currentClass = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbody",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // superopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // superopt ::= EXTENDS type 
            {
              Object RESULT =null;
		int supertypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int supertyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct supertype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(supertype.getKind() == Struct.Class) {
			parser.report_info("Class extended", null, supertypeleft);
		} else {
			parser.report_semantic_error("Type doesn't represent a class", supertypeleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classheader ::= CLASS IDENTIFIER superopt 
            {
              Object RESULT =null;
		int classnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int classnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String classname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(SymbolTable.find(classname) == SymbolTable.noObj){
			currentClass = SymbolTable.insert(Obj.Type, classname, parser.newClassType());
			SymbolTable.openScope();
			parser.report_info("Class declared", classname, classnameleft);
		} else {
			parser.report_semantic_error("Class name '" + classname+ "' is alraedy used", classnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classheader",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classdeclaration ::= classheader classbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdeclaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classfielddeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int classarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int classarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String classarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(parser.findInScope(classarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Fld, classarrayname, parser.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Class array declared", classarrayname, classarraynameleft);
		} else {
			parser.report_semantic_error("Class array with name '" + classarrayname+ "' is alraedy declared", classarraynameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classfielddeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int classfieldnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classfieldnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String classfieldname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.findInScope(classfieldname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Fld, classfieldname, currentType);
			parser.report_info("Class field declared", classfieldname, classfieldnameleft);
		} else {
			parser.report_semantic_error("Class field with name '" + classfieldname+ "' is alraedy declared", classfieldnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // classfielddeclarators ::= classfielddeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classfielddeclarators ::= classfielddeclarators COMMA classfielddeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classfielddeclaration ::= type NT$3 classfielddeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int classfieldtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int classfieldtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct classfieldtype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;
		int classfieldtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classfieldtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct classfieldtype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = classfieldtype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classfielddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classfielddeclarations ::= classfielddeclarations classfielddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // localvardeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int localarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int localarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String localarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(parser.findInScope(localarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, localarrayname, parser.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Local array declared", localarrayname, localarraynameleft);
		} else {
			parser.report_semantic_error("Local array with name '" + localarrayname+ "' is alraedy declared", localarraynameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // localvardeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int localvarnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int localvarnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String localvarname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.findInScope(localvarname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, localvarname, currentType);
			if(parser.isMain(currentMethod)) {
				parser.mainVarCount++;
			}
			parser.report_info("Local variable declared", localvarname, localvarnameleft);
		} else {
			parser.report_semantic_error("Local variable with name '" + localvarname+ "' is alraedy declared", localvarnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // localvardeclarators ::= localvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // localvardeclarators ::= localvardeclarators COMMA localvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localvardeclaration ::= type error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		parser.report_debug("Error recovery done", null, eleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localvardeclaration ::= type error SEMICOLON 
            {
              Object RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // localvardeclaration ::= type NT$2 localvardeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int localvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int localvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct localvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int localvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int localvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct localvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = localvartype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localvardeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // localvardeclarations ::= localvardeclarations localvardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // globalvardeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int globalarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String globalarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(SymbolTable.find(globalarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, globalarrayname, parser.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Global array declared", globalarrayname, globalarraynameleft);
		} else {
			parser.report_semantic_error("Global array with name '" + globalarrayname+ "' is alraedy declared", globalarraynameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globalvardeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int globalvarnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalvarnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String globalvarname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(SymbolTable.find(globalvarname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, globalvarname, currentType);
			parser.globalVarCount++;
			parser.report_info("Global variable declared", globalvarname, globalvarnameleft);
		} else {
			parser.report_semantic_error("Global variable with name '" + globalvarname+ "' is alraedy declared", globalvarnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globalvardeclarators ::= globalvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globalvardeclarators ::= error COMMA globalvardeclarator 
            {
              Object RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		parser.report_debug("Error recovery done", comma, commaleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globalvardeclarators ::= globalvardeclarators COMMA globalvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globalvardeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // globalvardeclaration ::= type NT$1 globalvardeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int globalvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int globalvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct globalvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int globalvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct globalvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = globalvartype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = bool;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character character = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = character;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = integer;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constdeclarator ::= IDENTIFIER EQ literal 
            {
              Object RESULT =null;
		int constnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String constname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constvalue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(SymbolTable.find(constname) == SymbolTable.noObj){
			if(constvalue instanceof Integer && currentType.getKind() == Struct.Int) {
				Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
				constObj.setAdr((int)constvalue);
				parser.constCount++; 
				parser.report_info("Const variable declared", constname, constnameleft);
			} else if(constvalue instanceof Character && currentType.getKind() == Struct.Char) {
				Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
				constObj.setAdr(Character.getNumericValue((char)constvalue));
				parser.constCount++; 
				parser.report_info("Const variable declared", constname, constnameleft);
			} else if(constvalue instanceof Boolean && currentType.getKind() == Struct.Bool) {
				Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
				constObj.setAdr(((boolean)constvalue) ? 1 : 0);
				parser.constCount++; 
				parser.report_info("Const variable declared", constname, constnameleft);
			} else {
				parser.report_semantic_error("Terminal type doesn't match literal type for const '" + constname + "'" , constnameleft);
			}
		} else {
			parser.report_error("Const variable with name '" + constname + "' is alraedy declared", constnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constdeclarators ::= constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constdeclarators ::= constdeclarators COMMA constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constdeclaration ::= CONST type NT$0 constdeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consttypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int consttyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct consttype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int consttypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consttyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct consttype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = consttype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations classdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations globalvardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations constdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programname ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
		SymbolTable.openScope();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programname",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programname declarations LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;
		int programnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int programnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj programname = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		SymbolTable.chainLocalSymbols(programname);
		SymbolTable.closeScope();
		if(!mainDefined) {
			parser.report_semantic_error("Main method not defined", rbraceleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

