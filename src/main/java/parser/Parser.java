
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 03 17:42:18 CEST 2017
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.Lexer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.BufferedReader;
import java.io.FileReader;
import rs.etf.pp1.symboltable.concepts.*;
import symboltablext.SymbolTable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 03 17:42:18 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\010\000\002\002\004\000\002\105" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\110\002\000\002\004\007\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\111" +
    "\002\000\002\007\006\000\002\007\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\005\000\002\012\004\000\002\012\002\000\002" +
    "\112\002\000\002\013\006\000\002\013\005\000\002\013" +
    "\004\000\002\014\005\000\002\014\003\000\002\015\003" +
    "\000\002\015\005\000\002\016\004\000\002\016\002\000" +
    "\002\113\002\000\002\017\006\000\002\020\005\000\002" +
    "\020\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\004\000\002\023\005\000\002\025\004\000\002\025\002" +
    "\000\002\024\006\000\002\026\005\000\002\026\002\000" +
    "\002\032\004\000\002\032\002\000\002\027\004\000\002" +
    "\030\010\000\002\034\003\000\002\034\002\000\002\033" +
    "\003\000\002\033\003\000\002\031\006\000\002\035\003" +
    "\000\002\035\002\000\002\037\003\000\002\037\005\000" +
    "\002\036\004\000\002\036\006\000\002\106\003\000\002" +
    "\040\004\000\002\040\002\000\002\041\004\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\004\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\005\000\002\042\007\000\002" +
    "\043\011\000\002\044\013\000\002\045\003\000\002\045" +
    "\002\000\002\046\003\000\002\046\002\000\002\047\005" +
    "\000\002\050\003\000\002\050\002\000\002\051\007\000" +
    "\002\052\010\000\002\053\004\000\002\053\002\000\002" +
    "\054\004\000\002\055\004\000\002\055\004\000\002\055" +
    "\005\000\002\055\003\000\002\055\003\000\002\056\003" +
    "\000\002\056\002\000\002\057\005\000\002\057\003\000" +
    "\002\060\005\000\002\060\003\000\002\062\005\000\002" +
    "\062\003\000\002\061\004\000\002\063\004\000\002\063" +
    "\002\000\002\064\005\000\002\064\004\000\002\065\003" +
    "\000\002\065\002\000\002\066\005\000\002\066\003\000" +
    "\002\067\004\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\005\000\002\067\005\000\002\070" +
    "\005\000\002\070\002\000\002\071\005\000\002\071\002" +
    "\000\002\072\004\000\002\073\004\000\002\073\002\000" +
    "\002\074\004\000\002\074\005\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\003\000\002\077\003\000" +
    "\002\100\003\000\002\100\003\000\002\101\003\000\002" +
    "\101\003\000\002\102\003\000\002\102\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\004\004\005\001\002\000\004\002\356\001" +
    "\002\000\004\023\007\001\002\000\014\003\ufffb\006\ufffb" +
    "\010\ufffb\023\ufffb\037\ufffb\001\002\000\014\003\uffff\006" +
    "\uffff\010\uffff\023\uffff\037\uffff\001\002\000\014\003\017" +
    "\006\021\010\022\023\020\037\012\001\002\000\014\003" +
    "\ufffc\006\ufffc\010\ufffc\023\ufffc\037\ufffc\001\002\000\012" +
    "\016\uffd0\022\uffd0\023\uffd0\040\uffd0\001\002\000\014\003" +
    "\ufffd\006\ufffd\010\ufffd\023\ufffd\037\ufffd\001\002\000\014" +
    "\003\ufffe\006\ufffe\010\ufffe\023\ufffe\037\ufffe\001\002\000" +
    "\004\037\061\001\002\000\006\003\ufff2\023\ufff2\001\002" +
    "\000\004\030\044\001\002\000\066\003\uffc2\023\uffc2\030" +
    "\uffc2\031\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\004\023" +
    "\040\001\002\000\004\023\020\001\002\000\004\023\ufffa" +
    "\001\002\000\004\023\027\001\002\000\006\030\036\031" +
    "\035\001\002\000\006\030\ufff7\031\ufff7\001\002\000\004" +
    "\060\030\001\002\000\010\024\031\025\032\026\034\001" +
    "\002\000\006\030\ufff5\031\ufff5\001\002\000\006\030\ufff4" +
    "\031\ufff4\001\002\000\006\030\ufff6\031\ufff6\001\002\000" +
    "\006\030\ufff3\031\ufff3\001\002\000\004\023\027\001\002" +
    "\000\014\003\ufff9\006\ufff9\010\ufff9\023\ufff9\037\ufff9\001" +
    "\002\000\006\030\ufff8\031\ufff8\001\002\000\006\020\041" +
    "\037\uffd5\001\002\000\004\023\020\001\002\000\004\037" +
    "\uffd7\001\002\000\004\037\uffd6\001\002\000\014\003\ufff0" +
    "\006\ufff0\010\ufff0\023\ufff0\037\ufff0\001\002\000\006\003" +
    "\046\023\047\001\002\000\004\031\057\001\002\000\010" +
    "\030\uffec\031\uffec\035\055\001\002\000\006\030\uffed\031" +
    "\uffed\001\002\000\006\030\053\031\052\001\002\000\004" +
    "\023\047\001\002\000\014\003\ufff1\006\ufff1\010\ufff1\023" +
    "\ufff1\037\ufff1\001\002\000\006\030\uffef\031\uffef\001\002" +
    "\000\004\036\056\001\002\000\006\030\uffeb\031\uffeb\001" +
    "\002\000\004\023\047\001\002\000\006\030\uffee\031\uffee" +
    "\001\002\000\010\023\uffdf\037\uffdf\040\uffdf\001\002\000" +
    "\014\003\uffd8\006\uffd8\010\uffd8\023\uffd8\037\uffd8\001\002" +
    "\000\010\023\020\037\064\040\uffd2\001\002\000\012\016" +
    "\uffd0\022\uffd0\023\uffd0\040\uffd0\001\002\000\004\040\101" +
    "\001\002\000\004\023\uffde\001\002\000\010\023\uffe0\037" +
    "\uffe0\040\uffe0\001\002\000\004\023\072\001\002\000\006" +
    "\030\uffdb\031\uffdb\001\002\000\010\030\uffda\031\uffda\035" +
    "\077\001\002\000\006\030\075\031\074\001\002\000\004" +
    "\023\072\001\002\000\010\023\uffdd\037\uffdd\040\uffdd\001" +
    "\002\000\006\030\uffdc\031\uffdc\001\002\000\004\036\100" +
    "\001\002\000\006\030\uffd9\031\uffd9\001\002\000\014\003" +
    "\uffd4\006\uffd4\010\uffd4\023\uffd4\037\uffd4\001\002\000\012" +
    "\016\uffcc\022\106\023\uffcc\040\107\001\002\000\012\016" +
    "\uffd1\022\uffd1\023\uffd1\040\uffd1\001\002\000\006\016\337" +
    "\023\020\001\002\000\006\023\uffe9\037\uffe9\001\002\000" +
    "\006\016\uffcd\023\uffcd\001\002\000\004\040\uffd3\001\002" +
    "\000\012\016\uffcf\022\uffcf\023\uffcf\040\uffcf\001\002\000" +
    "\006\023\020\037\112\001\002\000\026\005\uffc0\011\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0\023\uffc0\037" +
    "\uffc0\040\uffc0\001\002\000\006\003\116\023\uffe8\001\002" +
    "\000\006\023\uffea\037\uffea\001\002\000\004\023\121\001" +
    "\002\000\010\023\uffe5\030\117\037\uffe5\001\002\000\006" +
    "\023\uffe6\037\uffe6\001\002\000\006\030\uffe3\031\uffe3\001" +
    "\002\000\010\030\uffe2\031\uffe2\035\126\001\002\000\006" +
    "\030\124\031\123\001\002\000\004\023\121\001\002\000" +
    "\006\023\uffe7\037\uffe7\001\002\000\006\030\uffe4\031\uffe4" +
    "\001\002\000\004\036\127\001\002\000\006\030\uffe1\031" +
    "\uffe1\001\002\000\026\005\150\011\140\013\151\014\131" +
    "\015\136\017\153\021\132\023\137\037\142\040\134\001" +
    "\002\000\004\033\331\001\002\000\004\030\330\001\002" +
    "\000\026\005\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\021\uffc1\023\uffc1\037\uffc1\040\uffc1\001\002\000\012" +
    "\016\uffc9\022\uffc9\023\uffc9\040\uffc9\001\002\000\030\005" +
    "\uffb7\007\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7" +
    "\021\uffb7\023\uffb7\037\uffb7\040\uffb7\001\002\000\022\012" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\030\uffac\033\uff93" +
    "\042\162\001\002\000\072\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\036\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\001\002\000" +
    "\004\033\310\001\002\000\030\005\uffb8\007\uffb8\011\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\017\uffb8\021\uffb8\023\uffb8\037" +
    "\uffb8\040\uffb8\001\002\000\026\005\uffc0\011\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\017\uffc0\021\uffc0\023\uffc0\037\uffc0\040" +
    "\uffc0\001\002\000\030\005\uffb9\007\uffb9\011\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\021\uffb9\023\uffb9\037\uffb9\040" +
    "\uffb9\001\002\000\004\030\305\001\002\000\030\005\uffbe" +
    "\007\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\021" +
    "\uffbe\023\uffbe\037\uffbe\040\uffbe\001\002\000\030\005\uffbc" +
    "\007\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021" +
    "\uffbc\023\uffbc\037\uffbc\040\uffbc\001\002\000\024\033\300" +
    "\046\273\047\277\060\276\061\200\062\205\063\236\064" +
    "\237\065\245\001\002\000\004\030\270\001\002\000\004" +
    "\033\261\001\002\000\030\005\uffbd\007\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd\023\uffbd\037\uffbd" +
    "\040\uffbd\001\002\000\004\033\154\001\002\000\006\023" +
    "\137\030\uffb1\001\002\000\006\030\uffb2\034\uffb2\001\002" +
    "\000\004\030\157\001\002\000\022\012\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\030\uffaf\033\uff93\042\162\001\002" +
    "\000\016\012\213\023\137\024\222\025\220\026\214\033" +
    "\221\001\002\000\004\030\254\001\002\000\016\012\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\033\uff94\001\002\000" +
    "\012\030\uff9a\034\uff9a\056\uff9a\057\uff9a\001\002\000\012" +
    "\030\uff9c\034\uff9c\056\171\057\uff9c\001\002\000\036\030" +
    "\uff97\034\uff97\041\203\042\173\050\174\051\201\052\206" +
    "\053\211\054\175\055\210\056\uff97\057\uff97\061\200\062" +
    "\205\001\002\000\006\030\uffb0\057\167\001\002\000\020" +
    "\012\uff93\023\uff93\024\uff93\025\uff93\026\uff93\033\uff93\042" +
    "\162\001\002\000\012\030\uff9d\034\uff9d\056\171\057\uff9d" +
    "\001\002\000\020\012\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\033\uff93\042\162\001\002\000\012\030\uff9b\034\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\016\012\uff75\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\033\uff75\001\002\000\020\012\uff7e" +
    "\023\uff7e\024\uff7e\025\uff7e\026\uff7e\033\uff7e\042\uff7e\001" +
    "\002\000\020\012\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\033\uff7b\042\uff7b\001\002\000\012\030\uff99\034\uff99\056" +
    "\uff99\057\uff99\001\002\000\016\012\213\023\137\024\222" +
    "\025\220\026\214\033\221\001\002\000\022\003\uff74\012" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\033\uff74\042\uff74" +
    "\001\002\000\020\012\uff7d\023\uff7d\024\uff7d\025\uff7d\026" +
    "\uff7d\033\uff7d\042\uff7d\001\002\000\016\012\uff77\023\uff77" +
    "\024\uff77\025\uff77\026\uff77\033\uff77\001\002\000\016\012" +
    "\uff76\023\uff76\024\uff76\025\uff76\026\uff76\033\uff76\001\002" +
    "\000\016\012\uff78\023\uff78\024\uff78\025\uff78\026\uff78\033" +
    "\uff78\001\002\000\022\003\uff73\012\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\033\uff73\042\uff73\001\002\000\020\012" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\033\uff7c\042\uff7c" +
    "\001\002\000\020\012\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\033\uff93\042\162\001\002\000\020\012\uff79\023\uff79" +
    "\024\uff79\025\uff79\026\uff79\033\uff79\042\uff79\001\002\000" +
    "\020\012\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\033\uff7a" +
    "\042\uff7a\001\002\000\022\030\uff98\034\uff98\041\203\042" +
    "\173\056\uff98\057\uff98\061\200\062\205\001\002\000\004" +
    "\023\020\001\002\000\056\030\uff8d\031\uff8d\034\uff8d\036" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\001\002" +
    "\000\056\030\uff96\031\uff96\034\uff96\036\uff96\041\uff96\042" +
    "\uff96\043\240\044\243\045\241\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\061\uff96\062" +
    "\uff96\063\236\064\237\065\245\001\002\000\060\030\uff89" +
    "\031\uff89\033\226\034\uff89\036\uff89\041\uff89\042\uff89\043" +
    "\uff89\044\uff89\045\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\065\uff89\001\002\000\056\030\uff91\031\uff91" +
    "\034\uff91\036\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\001\002\000\056\030\uff8e\031\uff8e\034\uff8e\036\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\001\002\000" +
    "\020\012\uff93\023\uff93\024\uff93\025\uff93\026\uff93\033\uff93" +
    "\042\162\001\002\000\056\030\uff8f\031\uff8f\034\uff8f\036" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\001\002" +
    "\000\014\034\224\041\203\042\173\061\200\062\205\001" +
    "\002\000\056\030\uff8b\031\uff8b\034\uff8b\036\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002\000\056\030" +
    "\uff90\031\uff90\034\uff90\036\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\001\002\000\022\012\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\033\uff93\034\uffa0\042\162\001\002" +
    "\000\004\034\234\001\002\000\016\031\uff9e\034\uff9e\041" +
    "\203\042\173\061\200\062\205\001\002\000\006\031\232" +
    "\034\uffa1\001\002\000\020\012\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\033\uff93\042\162\001\002\000\016\031\uff9f" +
    "\034\uff9f\041\203\042\173\061\200\062\205\001\002\000" +
    "\056\030\uff8a\031\uff8a\034\uff8a\036\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\050\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\001\002\000\016\012\uff71\023" +
    "\uff71\024\uff71\025\uff71\026\uff71\033\uff71\001\002\000\022" +
    "\003\uff6d\012\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\033" +
    "\uff6d\042\uff6d\001\002\000\022\003\uff6c\012\uff6c\023\uff6c" +
    "\024\uff6c\025\uff6c\026\uff6c\033\uff6c\042\uff6c\001\002\000" +
    "\016\012\uff70\023\uff70\024\uff70\025\uff70\026\uff70\033\uff70" +
    "\001\002\000\016\012\uff6e\023\uff6e\024\uff6e\025\uff6e\026" +
    "\uff6e\033\uff6e\001\002\000\016\012\213\023\137\024\222" +
    "\025\220\026\214\033\221\001\002\000\016\012\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\026\uff6f\033\uff6f\001\002\000\016" +
    "\012\uff72\023\uff72\024\uff72\025\uff72\026\uff72\033\uff72\001" +
    "\002\000\022\003\uff6b\012\uff6b\023\uff6b\024\uff6b\025\uff6b" +
    "\026\uff6b\033\uff6b\042\uff6b\001\002\000\056\030\uff92\031" +
    "\uff92\034\uff92\036\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\057\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\001\002\000\060\030\uff87\031\uff87\034\uff87\035" +
    "\251\036\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056" +
    "\uff87\057\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87" +
    "\001\002\000\056\030\uff8c\031\uff8c\034\uff8c\036\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\061" +
    "\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\001\002\000\020" +
    "\012\uff93\023\uff93\024\uff93\025\uff93\026\uff93\033\uff93\042" +
    "\162\001\002\000\014\036\253\041\203\042\173\061\200" +
    "\062\205\001\002\000\056\030\uff88\031\uff88\034\uff88\036" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\001\002" +
    "\000\006\023\137\034\uffb1\001\002\000\004\034\256\001" +
    "\002\000\024\005\150\011\140\013\151\014\131\015\136" +
    "\017\153\021\132\023\137\037\142\001\002\000\030\005" +
    "\uffb3\007\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3" +
    "\021\uffb3\023\uffb3\037\uffb3\040\uffb3\001\002\000\056\030" +
    "\uff95\031\uff95\034\uff95\036\uff95\041\uff95\042\uff95\043\240" +
    "\044\243\045\241\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\055\uff95\056\uff95\057\uff95\061\uff95\062\uff95\063\236" +
    "\064\237\065\245\001\002\000\020\012\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\033\uff93\042\162\001\002\000\016" +
    "\031\263\034\uffa8\041\203\042\173\061\200\062\205\001" +
    "\002\000\004\024\267\001\002\000\004\034\265\001\002" +
    "\000\004\030\266\001\002\000\030\005\uffaa\007\uffaa\011" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\021\uffaa\023\uffaa" +
    "\037\uffaa\040\uffaa\001\002\000\004\034\uffa9\001\002\000" +
    "\030\005\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\017\uffbb\021\uffbb\023\uffbb\037\uffbb\040\uffbb\001\002\000" +
    "\022\003\uff7f\012\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\033\uff7f\042\uff7f\001\002\000\006\030\uffa7\034\uffa7\001" +
    "\002\000\006\030\uffa3\034\uffa3\001\002\000\022\003\303" +
    "\012\uff93\023\uff93\024\uff93\025\uff93\026\uff93\033\uff93\042" +
    "\162\001\002\000\022\003\uff80\012\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\033\uff80\042\uff80\001\002\000\022\003" +
    "\uff81\012\uff81\023\uff81\024\uff81\025\uff81\026\uff81\033\uff81" +
    "\042\uff81\001\002\000\006\030\uffa2\034\uffa2\001\002\000" +
    "\022\012\uff93\023\uff93\024\uff93\025\uff93\026\uff93\033\uff93" +
    "\034\uffa0\042\162\001\002\000\004\034\302\001\002\000" +
    "\006\030\uffa4\034\uffa4\001\002\000\006\030\uffa5\034\uffa5" +
    "\001\002\000\016\030\uffa6\034\uffa6\041\203\042\173\061" +
    "\200\062\205\001\002\000\030\005\uffbf\007\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\023\uffbf\037" +
    "\uffbf\040\uffbf\001\002\000\026\005\150\011\140\013\151" +
    "\014\131\015\136\017\153\021\132\023\137\037\142\040" +
    "\307\001\002\000\030\005\uffb6\007\uffb6\011\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\017\uffb6\021\uffb6\023\uffb6\037\uffb6\040" +
    "\uffb6\001\002\000\020\012\uff93\023\uff93\024\uff93\025\uff93" +
    "\026\uff93\033\uff93\042\162\001\002\000\006\034\312\057" +
    "\167\001\002\000\024\005\150\011\140\013\151\014\131" +
    "\015\136\017\153\021\132\023\137\037\142\001\002\000" +
    "\030\005\uffb5\007\314\011\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\017\uffb5\021\uffb5\023\uffb5\037\uffb5\040\uffb5\001\002\000" +
    "\024\005\150\011\140\013\151\014\131\015\136\017\153" +
    "\021\132\023\137\037\142\001\002\000\030\005\uffb4\007" +
    "\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\021\uffb4" +
    "\023\uffb4\037\uffb4\040\uffb4\001\002\000\072\030\uff86\031" +
    "\uff86\032\321\033\uff86\034\uff86\035\317\036\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86" +
    "\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065" +
    "\uff86\001\002\000\020\012\uff93\023\uff93\024\uff93\025\uff93" +
    "\026\uff93\033\uff93\042\162\001\002\000\072\030\uff85\031" +
    "\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065" +
    "\uff85\001\002\000\004\023\322\001\002\000\072\030\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\065\uff83\001\002\000\014\036\324\041\203\042\173\061" +
    "\200\062\205\001\002\000\072\030\uff82\031\uff82\032\uff82" +
    "\033\uff82\034\uff82\035\uff82\036\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060" +
    "\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\001\002" +
    "\000\014\030\uffad\041\203\042\173\061\200\062\205\001" +
    "\002\000\004\030\327\001\002\000\030\005\uffae\007\uffae" +
    "\011\uffae\013\uffae\014\uffae\015\uffae\017\uffae\021\uffae\023" +
    "\uffae\037\uffae\040\uffae\001\002\000\030\005\uffba\007\uffba" +
    "\011\uffba\013\uffba\014\uffba\015\uffba\017\uffba\021\uffba\023" +
    "\uffba\037\uffba\040\uffba\001\002\000\004\023\137\001\002" +
    "\000\004\034\333\001\002\000\004\030\334\001\002\000" +
    "\030\005\uffab\007\uffab\011\uffab\013\uffab\014\uffab\015\uffab" +
    "\017\uffab\021\uffab\023\uffab\037\uffab\040\uffab\001\002\000" +
    "\004\023\uffca\001\002\000\004\023\340\001\002\000\004" +
    "\023\uffcb\001\002\000\004\033\341\001\002\000\006\023" +
    "\020\034\uffc7\001\002\000\006\031\352\034\uffc8\001\002" +
    "\000\004\034\351\001\002\000\004\023\346\001\002\000" +
    "\006\031\uffc6\034\uffc6\001\002\000\010\031\uffc4\034\uffc4" +
    "\035\347\001\002\000\004\036\350\001\002\000\006\031" +
    "\uffc3\034\uffc3\001\002\000\006\023\uffce\037\uffce\001\002" +
    "\000\004\023\020\001\002\000\006\031\uffc5\034\uffc5\001" +
    "\002\000\012\016\uffcc\022\106\023\uffcc\040\355\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\105\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\014\004\013\007\012\022\010\023\014\106" +
    "\015\001\001\000\002\001\001\000\004\032\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\061\001" +
    "\001\000\004\111\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\022\001\001\000" +
    "\004\110\023\001\001\000\006\005\024\006\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\041" +
    "\001\001\000\004\106\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\050\011\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\057\001\001\000\002\001\001\000\004" +
    "\016\062\001\001\000\002\001\001\000\010\017\066\026" +
    "\064\106\065\001\001\000\004\032\101\001\001\000\002" +
    "\001\001\000\004\113\067\001\001\000\002\001\001\000" +
    "\006\020\072\021\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\102\030\104\034" +
    "\103\001\001\000\002\001\001\000\006\033\335\106\334" +
    "\001\001\000\006\012\110\031\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\113" +
    "\106\112\001\001\000\004\040\127\001\001\000\004\112" +
    "\114\001\001\000\002\001\001\000\006\014\121\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\041\132\042\144\043\151" +
    "\044\145\047\142\051\140\052\134\054\143\072\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\325\064" +
    "\324\065\157\001\001\000\004\073\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\055\271\075\273\101\274\104\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\155\054\154\072\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\046\160" +
    "\060\165\061\162\062\163\064\164\065\157\001\001\000" +
    "\010\066\257\067\216\072\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\063\175\076\206\077\176\100\203\101\201\001\001" +
    "\000\002\001\001\000\012\061\162\062\167\064\164\065" +
    "\157\001\001\000\002\001\001\000\010\061\171\064\164" +
    "\065\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\066\214\067\216\072\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\064" +
    "\211\065\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\077\176\100\203\101\201\001\001\000\004\106" +
    "\246\001\001\000\002\001\001\000\010\102\241\103\243" +
    "\104\234\001\001\000\004\070\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\064\222\065\157\001\001" +
    "\000\002\001\001\000\010\077\176\100\203\101\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\056\226" +
    "\057\230\064\227\065\157\001\001\000\002\001\001\000" +
    "\010\077\176\100\203\101\201\001\001\000\002\001\001" +
    "\000\006\064\232\065\157\001\001\000\010\077\176\100" +
    "\203\101\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\067\245\072\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\247\001\001\000\002\001\001\000\006" +
    "\064\251\065\157\001\001\000\010\077\176\100\203\101" +
    "\201\001\001\000\002\001\001\000\010\045\254\054\154" +
    "\072\146\001\001\000\002\001\001\000\024\041\256\042" +
    "\144\043\151\044\145\047\142\051\140\052\134\054\143" +
    "\072\146\001\001\000\002\001\001\000\010\102\241\103" +
    "\243\104\234\001\001\000\006\064\261\065\157\001\001" +
    "\000\012\053\263\077\176\100\203\101\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\064\303" +
    "\065\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\056\300\057\230\064\227\065\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\077\176\100\203\101\201\001\001\000\002" +
    "\001\001\000\024\041\132\042\144\043\151\044\145\047" +
    "\142\051\140\052\134\054\143\072\146\001\001\000\002" +
    "\001\001\000\014\060\310\061\162\062\163\064\164\065" +
    "\157\001\001\000\002\001\001\000\024\041\312\042\144" +
    "\043\151\044\145\047\142\051\140\052\134\054\143\072" +
    "\146\001\001\000\002\001\001\000\024\041\314\042\144" +
    "\043\151\044\145\047\142\051\140\052\134\054\143\072" +
    "\146\001\001\000\002\001\001\000\004\074\317\001\001" +
    "\000\006\064\322\065\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\077\176\100\203" +
    "\101\201\001\001\000\002\001\001\000\010\077\176\100" +
    "\203\101\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\035\342\036\344\037\341\106\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\352\106\343\001\001\000" +
    "\002\001\001\000\010\027\102\030\104\034\103\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	SymbolTable.init();

    }



	public static int globalVarCount = 0;
	public static int mainVarCount = 0;
	public static int constCount = 0;
	public static int globalArrayVarCount = 0;
	public static boolean globalRange = false;
	public static boolean mainScope = false;

	private static boolean errorReported = false;

	public static final Logger logger = LogManager.getLogger(Parser.class);

	public static void main(String argv[]) {
		try(BufferedReader reader = new BufferedReader(new FileReader(argv[0]))){

				logger.info("Parsing source file: " + argv[0]);

				Lexer lexer = new Lexer(reader);
				Parser parser = new Parser(lexer);

				logger.info("============= Semantic analysis =============");

				Symbol symbol = parser.parse();

				logger.info("============= Syntax analysis ===============");
				logger.info("Global variables:" + parser.globalVarCount);
				logger.info("Local variables in main:" + parser.mainVarCount);
				logger.info("Global constants:" + parser.constCount);
				logger.info("Global arrays:" + parser.globalArrayVarCount);

				if(parser.errorReported){
					logger.info("Source file contains error(s)!");
				} else {
					logger.info("Source file successfully parsed!");
				}

				SymbolTable.dump();

		} catch (Exception e) {
				e.printStackTrace();
		}
	}

	public void syntax_error(Symbol symbol) {
			report_error("Syntax error:", symbol);
	}

	public void unrecovered_syntax_error(Symbol symbol) throws java.lang.Exception {
			report_fatal_error("Fatal error, stopping with parsing the file", symbol);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void report_error(String message, Object info) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder(message); 
		if (info instanceof Symbol){
			Symbol symbol = (Symbol) info;
			if(symbol.value != null){
				stringBuilder.append(" on line ").append(symbol.left)
					.append(", near token '").append(symbol.value.toString()).append("'");
			} else {
				stringBuilder.append(" on line ").append(symbol.left);
			}
		}
		logger.error(stringBuilder.toString());
	}

	public void report_debug(String message, Object info, int line) {
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" till token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.debug(stringBuilder.toString());
	}

	public void report_info(String message, Object info, int line) {
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" with token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.info(stringBuilder.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	Struct currentType = SymbolTable.noType;
	Obj currentClass = null;
	Obj currentMethod = null;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // muloperatorright ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // muloperatorright ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // muloperatorright ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // muloperatorleft ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // muloperatorleft ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // muloperatorleft ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // muloperator ::= muloperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // muloperator ::= muloperatorleft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperator",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // addoperatorright ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // addoperatorright ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // addoperatorleft ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // addoperatorleft ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // addoperator ::= addoperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperator",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // addoperator ::= addoperatorleft 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperator",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // reloperator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // reloperator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // reloperator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // reloperator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // reloperator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // reloperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // assignoperator ::= muloperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assignoperator ::= addoperatorright 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // assignoperator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // identorexpr ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexpr",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // identorexpr ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexpr",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // identorexprlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexprlist",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // identorexprlist ::= identorexprlist identorexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identorexprlist",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // designator ::= IDENTIFIER identorexprlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // newexpressionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newexpressionopt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // newexpressionopt ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newexpressionopt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // factoractparamsopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factoractparamsopt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factoractparamsopt ::= LPAREN actparametersopt RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factoractparamsopt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= NEW type newexpressionopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= designator factoractparamsopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // term ::= term muloperator factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // minusopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minusopt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // minusopt ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minusopt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= minusopt term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression addoperator term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conditionfactopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfactopt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conditionfactopt ::= reloperator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfactopt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditionfact ::= expression conditionfactopt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfact",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conditionterm ::= conditionfact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conditionterm ::= conditionterm ANDAND conditionfact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condition ::= conditionterm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condition ::= condition OROR conditionterm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // actparameters ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // actparameters ::= actparameters COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // actparametersopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // actparametersopt ::= actparameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // designatorstatementexpr ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // designatorstatementexpr ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // designatorstatementexpr ::= LPAREN actparametersopt RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // designatorstatementexpr ::= assignoperator error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		parser.report_debug("Error recovery done", null, eleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // designatorstatementexpr ::= assignoperator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // designatorstatement ::= designator designatorstatementexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // integerliteralopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // integerliteralopt ::= COMMA INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // printstatement ::= PRINT LPAREN expression integerliteralopt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printstatement",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // readstatement ::= READ LPAREN designator RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstatement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expressionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expressionopt ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // returnstatement ::= RETURN expressionopt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnstatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conditionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conditionopt ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designatorstatementopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // designatorstatementopt ::= designatorstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forstatement ::= FOR LPAREN designatorstatementopt SEMICOLON conditionopt SEMICOLON designatorstatementopt RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstatement",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ifelsestatement ::= IF LPAREN condition RPAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelsestatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifstatement ::= IF LPAREN condition RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= printstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= readstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= returnstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= forstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= ifelsestatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= ifstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= designatorstatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= IDENTIFIER 
            {
              Struct RESULT =null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj typeNode = SymbolTable.find(typename);
		if (typeNode == SymbolTable.noObj) {
			parser.report_error("Type not found in symbol table '" + typename + "'", null);
			RESULT = SymbolTable.noType;
		} else if(Obj.Type == typeNode.getKind()) {
			RESULT = typeNode.getType();
		} else {
			parser.report_error("Error on line " + typenameleft + " '" + typename + "' doesn't represent a type", null);
			RESULT = SymbolTable.noType;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // formalparameter ::= type IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // formalparameter ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formalparameters ::= formalparameters COMMA formalparameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formalparameters ::= formalparameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formalparameteropt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formalparameteropt ::= formalparameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // methodbody ::= localvardeclarations LBRACE statements RBRACE 
            {
              Object RESULT =null;
		 
		parser.mainScope = false; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodbody",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // methodreturntype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // methodreturntype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // staticopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // staticopt ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // methodheader ::= staticopt methodreturntype IDENTIFIER LPAREN formalparameteropt RPAREN 
            {
              Object RESULT =null;
		int methodnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methodnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String methodname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
		if(methodname.equals("main")) {
			parser.mainScope = true; 
		} 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // methoddeclaration ::= methodheader methodbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // methoddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // methoddeclarations ::= methoddeclarations methoddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // classbodymethods ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // classbodymethods ::= LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // classbody ::= LBRACE classfielddeclarations classbodymethods RBRACE 
            {
              Object RESULT =null;
		
		SymbolTable.chainLocalSymbols(currentClass.getType());
		SymbolTable.closeScope();
		currentClass = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbody",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // superopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // superopt ::= EXTENDS type 
            {
              Object RESULT =null;
		int supertypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int supertyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct supertype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(supertype.getKind() == Struct.Class) {
			parser.report_info("Class extended", null, supertypeleft);
		} else {
			parser.report_error("Type doesn't represent a class", null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classheader ::= CLASS IDENTIFIER superopt 
            {
              Object RESULT =null;
		int classnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int classnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String classname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(SymbolTable.find(classname) == SymbolTable.noObj){
			currentClass = SymbolTable.insert(Obj.Type, classname, SymbolTable.newClassType());
			SymbolTable.openScope();
			parser.report_info("Class declared", classname, classnameleft);
		} else {
			parser.report_error("Class name '" + classname+ "' is alraedy used on line " + classnameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classheader",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classdeclaration ::= classheader classbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdeclaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classfielddeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int classarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int classarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String classarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(SymbolTable.find(classarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, classarrayname, SymbolTable.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Class array declared", classarrayname, classarraynameleft);
		} else {
			parser.report_error("Class array with name '" + classarrayname+ "' is alraedy declared on line " + classarraynameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classfielddeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int classfieldnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classfieldnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String classfieldname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(SymbolTable.find(classfieldname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, classfieldname, currentType);
			if(parser.mainScope) {
				parser.mainVarCount++;
			}
			parser.report_info("Class field declared", classfieldname, classfieldnameleft);
		} else {
			parser.report_error("Class field with name '" + classfieldname+ "' is alraedy declared on line " + classfieldnameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // classfielddeclarators ::= classfielddeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classfielddeclarators ::= classfielddeclarators COMMA classfielddeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classfielddeclaration ::= type NT$3 classfielddeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int classfieldtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int classfieldtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct classfieldtype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;
		int classfieldtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classfieldtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct classfieldtype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = classfieldtype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classfielddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classfielddeclarations ::= classfielddeclarations classfielddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // localvardeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int localarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int localarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String localarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(SymbolTable.find(localarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, localarrayname, SymbolTable.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Local array declared", localarrayname, localarraynameleft);
		} else {
			parser.report_error("Local array with name '" + localarrayname+ "' is alraedy declared on line " + localarraynameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // localvardeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int localvarnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int localvarnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String localvarname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(SymbolTable.find(localvarname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, localvarname, currentType);
			if(parser.mainScope) {
				parser.mainVarCount++;
			}
			parser.report_info("Local variable declared", localvarname, localvarnameleft);
		} else {
			parser.report_error("Local variable with name '" + localvarname+ "' is alraedy declared on line " + localvarnameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // localvardeclarators ::= localvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // localvardeclarators ::= localvardeclarators COMMA localvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localvardeclaration ::= type error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		parser.report_debug("Error recovery done", null, eleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localvardeclaration ::= type error SEMICOLON 
            {
              Object RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // localvardeclaration ::= type NT$2 localvardeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int localvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int localvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct localvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int localvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int localvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct localvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = localvartype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localvardeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // localvardeclarations ::= localvardeclarations localvardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // globalvardeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int globalarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String globalarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(SymbolTable.find(globalarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, globalarrayname, SymbolTable.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Global array declared", globalarrayname, globalarraynameleft);
		} else {
			parser.report_error("Global array with name '" + globalarrayname+ "' is alraedy declared on line " + globalarraynameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globalvardeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int globalvarnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalvarnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String globalvarname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(SymbolTable.find(globalvarname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Var, globalvarname, currentType);
			parser.globalVarCount++;
			parser.report_info("Global variable declared", globalvarname, globalvarnameleft);
		} else {
			parser.report_error("Global variable with name '" + globalvarname+ "' is alraedy declared on line " + globalvarnameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globalvardeclarators ::= globalvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globalvardeclarators ::= error COMMA globalvardeclarator 
            {
              Object RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		parser.report_debug("Error recovery done", comma, commaleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globalvardeclarators ::= globalvardeclarators COMMA globalvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globalvardeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // globalvardeclaration ::= type NT$1 globalvardeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int globalvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int globalvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct globalvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int globalvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct globalvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = globalvartype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = bool;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character character = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = character;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = integer;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constdeclarator ::= IDENTIFIER EQ literal 
            {
              Object RESULT =null;
		int constnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String constname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constvalue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(SymbolTable.find(constname) == SymbolTable.noObj){
			if(constvalue instanceof Integer && currentType.getKind() == Struct.Int) {
				Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
				constObj.setAdr((int)constvalue);
				parser.constCount++; 
				parser.report_info("Const variable declared", constname, constnameleft);
			} else if(constvalue instanceof Character && currentType.getKind() == Struct.Char) {
				Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
				constObj.setAdr(Character.getNumericValue((char)constvalue));
				parser.constCount++; 
				parser.report_info("Const variable declared", constname, constnameleft);
			} else if(constvalue instanceof Boolean && currentType.getKind() == Struct.Bool) {
				Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
				constObj.setAdr(((boolean)constvalue) ? 1 : 0);
				parser.constCount++; 
				parser.report_info("Const variable declared", constname, constnameleft);
			} else {
				parser.report_error("Terminal type doesn't match literal type on line " + constnameleft, null);
			}
		} else {
			parser.report_error("Const variable with name '" + constname + "' is alraedy declared on line " + constnameleft, null);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constdeclarators ::= constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constdeclarators ::= constdeclarators COMMA constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constdeclaration ::= CONST type NT$0 constdeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consttypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int consttyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct consttype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int consttypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consttyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct consttype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = consttype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations classdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations globalvardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations constdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programName ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
		SymbolTable.openScope();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programName",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programName declarations LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;
		int programnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int programnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj programname = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		SymbolTable.chainLocalSymbols(programname);
		SymbolTable.closeScope();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

