
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 11 00:55:03 CEST 2017
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.Lexer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.FileOutputStream;
import java.util.LinkedList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Collections;
import rs.etf.pp1.symboltable.concepts.*;
import symboltablext.SymbolTable;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import symboltablext.visitors.DumpSymbolTableVisitorExtended;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 11 00:55:03 CEST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\010\000\002\002\004\000\002\053" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\105\002\000\002\004\007\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\106" +
    "\002\000\002\007\006\000\002\007\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\005\000\002\012\004\000\002\012\002\000\002" +
    "\107\002\000\002\013\006\000\002\013\005\000\002\013" +
    "\004\000\002\014\005\000\002\014\003\000\002\015\003" +
    "\000\002\015\005\000\002\016\004\000\002\016\002\000" +
    "\002\110\002\000\002\017\006\000\002\020\005\000\002" +
    "\020\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\004\000\002\023\005\000\002\025\004\000\002\025\002" +
    "\000\002\024\006\000\002\026\005\000\002\026\002\000" +
    "\002\032\004\000\002\032\002\000\002\027\004\000\002" +
    "\111\002\000\002\030\010\000\002\033\003\000\002\033" +
    "\002\000\002\072\003\000\002\072\003\000\002\031\005" +
    "\000\002\074\005\000\002\074\005\000\002\074\004\000" +
    "\002\076\005\000\002\076\005\000\002\076\003\000\002" +
    "\075\004\000\002\075\006\000\002\062\003\000\002\034" +
    "\004\000\002\034\002\000\002\035\004\000\002\035\003" +
    "\000\002\035\003\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\005\000\002\112\002\000\002\113\002\000\002\036" +
    "\010\000\002\114\002\000\002\037\005\000\002\037\002" +
    "\000\002\040\005\000\002\040\005\000\002\115\002\000" +
    "\002\041\006\000\002\116\002\000\002\117\002\000\002" +
    "\120\002\000\002\042\014\000\002\042\005\000\002\043" +
    "\003\000\002\043\002\000\002\044\003\000\002\044\002" +
    "\000\002\045\005\000\002\046\003\000\002\046\002\000" +
    "\002\047\007\000\002\050\010\000\002\073\004\000\002" +
    "\073\002\000\002\121\002\000\002\051\006\000\002\051" +
    "\005\000\002\122\002\000\002\051\007\000\002\051\004" +
    "\000\002\071\003\000\002\071\003\000\002\052\003\000" +
    "\002\052\002\000\002\077\005\000\002\077\003\000\002" +
    "\123\002\000\002\102\006\000\002\102\003\000\002\124" +
    "\002\000\002\103\006\000\002\103\003\000\002\104\003" +
    "\000\002\125\002\000\002\104\006\000\002\126\002\000" +
    "\002\055\006\000\002\055\003\000\002\127\002\000\002" +
    "\056\006\000\002\056\003\000\002\056\004\000\002\130" +
    "\002\000\002\057\006\000\002\057\003\000\002\131\002" +
    "\000\002\060\006\000\002\060\003\000\002\061\003\000" +
    "\002\132\002\000\002\061\007\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\004\000\002\061" +
    "\007\000\002\061\005\000\002\054\003\000\002\054\005" +
    "\000\002\133\002\000\002\054\005\000\002\101\005\000" +
    "\002\101\005\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\004\005\001\002\000\004\002\u010c\001" +
    "\002\000\004\023\007\001\002\000\014\003\ufffb\006\ufffb" +
    "\010\ufffb\023\ufffb\036\ufffb\001\002\000\014\003\uffff\006" +
    "\uffff\010\uffff\023\uffff\036\uffff\001\002\000\014\003\017" +
    "\006\021\010\022\023\020\036\012\001\002\000\014\003" +
    "\ufffc\006\ufffc\010\ufffc\023\ufffc\036\ufffc\001\002\000\012" +
    "\016\uffd0\022\uffd0\023\uffd0\037\uffd0\001\002\000\014\003" +
    "\ufffd\006\ufffd\010\ufffd\023\ufffd\036\ufffd\001\002\000\014" +
    "\003\ufffe\006\ufffe\010\ufffe\023\ufffe\036\ufffe\001\002\000" +
    "\004\036\061\001\002\000\006\003\ufff2\023\ufff2\001\002" +
    "\000\004\027\044\001\002\000\066\003\uffbf\023\uffbf\027" +
    "\uffbf\030\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\004\023" +
    "\040\001\002\000\004\023\020\001\002\000\004\023\ufffa" +
    "\001\002\000\004\023\027\001\002\000\006\027\036\030" +
    "\035\001\002\000\006\027\ufff7\030\ufff7\001\002\000\004" +
    "\057\030\001\002\000\010\024\031\025\032\026\034\001" +
    "\002\000\006\027\ufff5\030\ufff5\001\002\000\006\027\ufff4" +
    "\030\ufff4\001\002\000\006\027\ufff6\030\ufff6\001\002\000" +
    "\006\027\ufff3\030\ufff3\001\002\000\004\023\027\001\002" +
    "\000\014\003\ufff9\006\ufff9\010\ufff9\023\ufff9\036\ufff9\001" +
    "\002\000\006\027\ufff8\030\ufff8\001\002\000\006\020\041" +
    "\036\uffd5\001\002\000\004\023\020\001\002\000\004\036" +
    "\uffd7\001\002\000\004\036\uffd6\001\002\000\014\003\ufff0" +
    "\006\ufff0\010\ufff0\023\ufff0\036\ufff0\001\002\000\006\003" +
    "\046\023\047\001\002\000\004\030\057\001\002\000\010" +
    "\027\uffec\030\uffec\034\055\001\002\000\006\027\uffed\030" +
    "\uffed\001\002\000\006\027\053\030\052\001\002\000\004" +
    "\023\047\001\002\000\014\003\ufff1\006\ufff1\010\ufff1\023" +
    "\ufff1\036\ufff1\001\002\000\006\027\uffef\030\uffef\001\002" +
    "\000\004\035\056\001\002\000\006\027\uffeb\030\uffeb\001" +
    "\002\000\004\023\047\001\002\000\006\027\uffee\030\uffee" +
    "\001\002\000\010\023\uffdf\036\uffdf\037\uffdf\001\002\000" +
    "\014\003\uffd8\006\uffd8\010\uffd8\023\uffd8\036\uffd8\001\002" +
    "\000\010\023\020\036\064\037\uffd2\001\002\000\012\016" +
    "\uffd0\022\uffd0\023\uffd0\037\uffd0\001\002\000\004\037\101" +
    "\001\002\000\004\023\uffde\001\002\000\010\023\uffe0\036" +
    "\uffe0\037\uffe0\001\002\000\004\023\072\001\002\000\006" +
    "\027\uffdb\030\uffdb\001\002\000\010\027\uffda\030\uffda\034" +
    "\077\001\002\000\006\027\075\030\074\001\002\000\004" +
    "\023\072\001\002\000\010\023\uffdd\036\uffdd\037\uffdd\001" +
    "\002\000\006\027\uffdc\030\uffdc\001\002\000\004\035\100" +
    "\001\002\000\006\027\uffd9\030\uffd9\001\002\000\014\003" +
    "\uffd4\006\uffd4\010\uffd4\023\uffd4\036\uffd4\001\002\000\012" +
    "\016\uffcb\022\106\023\uffcb\037\107\001\002\000\012\016" +
    "\uffd1\022\uffd1\023\uffd1\037\uffd1\001\002\000\006\016\351" +
    "\023\020\001\002\000\004\036\110\001\002\000\006\016" +
    "\uffcc\023\uffcc\001\002\000\004\037\uffd3\001\002\000\026" +
    "\005\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021" +
    "\uffbd\023\uffbd\036\uffbd\037\uffbd\001\002\000\012\016\uffcf" +
    "\022\uffcf\023\uffcf\037\uffcf\001\002\000\026\005\132\011" +
    "\122\013\133\014\113\015\120\017\134\021\114\023\121" +
    "\036\124\037\116\001\002\000\004\032\343\001\002\000" +
    "\004\027\342\001\002\000\026\005\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\021\uffbe\023\uffbe\036\uffbe\037" +
    "\uffbe\001\002\000\012\016\uffc8\022\uffc8\023\uffc8\037\uffc8" +
    "\001\002\000\030\005\uffb5\007\uffb5\011\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\017\uffb5\021\uffb5\023\uffb5\036\uffb5\037\uffb5" +
    "\001\002\000\022\012\146\023\121\024\163\025\161\026" +
    "\150\027\uff9e\032\162\041\144\001\002\000\072\027\uff6e" +
    "\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\040" +
    "\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e" +
    "\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055" +
    "\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e" +
    "\064\uff6e\001\002\000\004\032\uffb3\001\002\000\030\005" +
    "\uffb6\007\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6" +
    "\021\uffb6\023\uffb6\036\uffb6\037\uffb6\001\002\000\026\005" +
    "\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd" +
    "\023\uffbd\036\uffbd\037\uffbd\001\002\000\030\005\uffb7\007" +
    "\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\021\uffb7" +
    "\023\uffb7\036\uffb7\037\uffb7\001\002\000\004\027\317\001" +
    "\002\000\030\005\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\017\uffbb\021\uffbb\023\uffbb\036\uffbb\037\uffbb\001" +
    "\002\000\030\005\uffba\007\uffba\011\uffba\013\uffba\014\uffba" +
    "\015\uffba\017\uffba\021\uffba\023\uffba\036\uffba\037\uffba\001" +
    "\002\000\030\031\232\032\uff96\034\uff6c\045\302\046\307" +
    "\057\305\060\220\061\221\062\177\063\175\064\200\001" +
    "\002\000\004\027\300\001\002\000\004\032\271\001\002" +
    "\000\004\032\136\001\002\000\024\005\uffab\011\uffab\013" +
    "\uffab\014\uffab\015\uffab\017\uffab\021\uffab\023\uffab\036\uffab" +
    "\001\002\000\010\003\137\023\121\027\uffa3\001\002\000" +
    "\004\033\266\001\002\000\006\027\uffa4\033\uffa4\001\002" +
    "\000\004\027\142\001\002\000\022\012\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\032\uffa9\041\uffa9\001\002" +
    "\000\022\012\146\023\121\024\163\025\161\026\150\027" +
    "\uffa1\032\162\041\144\001\002\000\016\012\146\023\121" +
    "\024\163\025\161\026\150\032\162\001\002\000\004\027" +
    "\260\001\002\000\004\023\020\001\002\000\006\027\uffa2" +
    "\056\uff8d\001\002\000\056\027\uff72\030\uff72\033\uff72\035" +
    "\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\047\uff72" +
    "\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\001\002" +
    "\000\042\027\uff7f\030\uff7f\033\uff7f\035\uff7f\040\uff7f\041" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f" +
    "\055\uff7f\056\uff7f\060\uff7f\061\uff7f\001\002\000\064\027" +
    "\uff77\030\uff77\031\232\032\uff76\033\uff77\034\uff6c\035\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77" +
    "\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\001\002\000" +
    "\012\027\uff88\033\uff88\055\uff88\056\uff88\001\002\000\042" +
    "\027\uff82\030\uff82\033\uff82\035\uff82\040\uff81\041\uff81\047" +
    "\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\060\uff84\061\uff84\001\002\000\026\027\uff87\033" +
    "\uff87\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff87\056\uff87\001\002\000\012\027\uff8b\033\uff8b\055" +
    "\uff8a\056\uff8b\001\002\000\056\027\uff78\030\uff78\033\uff78" +
    "\035\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\047" +
    "\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78" +
    "\056\uff78\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\001" +
    "\002\000\056\027\uff7b\030\uff7b\033\uff7b\035\uff7b\040\uff7b" +
    "\041\uff7b\042\uff7a\043\uff7a\044\uff7a\047\uff7b\050\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\060\uff7b" +
    "\061\uff7b\062\uff7d\063\uff7d\064\uff7d\001\002\000\056\027" +
    "\uff73\030\uff73\033\uff73\035\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053" +
    "\uff73\054\uff73\055\uff73\056\uff73\060\uff73\061\uff73\062\uff73" +
    "\063\uff73\064\uff73\001\002\000\020\012\146\023\121\024" +
    "\163\025\161\026\150\032\162\041\144\001\002\000\056" +
    "\027\uff74\030\uff74\033\uff74\035\uff74\040\uff74\041\uff74\042" +
    "\uff74\043\uff74\044\uff74\047\uff74\050\uff74\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\055\uff74\056\uff74\060\uff74\061\uff74\062" +
    "\uff74\063\uff74\064\uff74\001\002\000\004\033\165\001\002" +
    "\000\056\027\uff6f\030\uff6f\033\uff6f\035\uff6f\040\uff6f\041" +
    "\uff6f\042\uff6f\043\uff6f\044\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\001\002\000\010\062\177" +
    "\063\175\064\200\001\002\000\010\042\171\043\172\044" +
    "\170\001\002\000\016\012\uff59\023\uff59\024\uff59\025\uff59" +
    "\026\uff59\032\uff59\001\002\000\016\012\uff5b\023\uff5b\024" +
    "\uff5b\025\uff5b\026\uff5b\032\uff5b\001\002\000\016\012\uff5a" +
    "\023\uff5a\024\uff5a\025\uff5a\026\uff5a\032\uff5a\001\002\000" +
    "\016\012\146\023\121\024\163\025\161\026\150\032\162" +
    "\001\002\000\056\027\uff79\030\uff79\033\uff79\035\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\047\uff79\050\uff79" +
    "\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\060" +
    "\uff79\061\uff79\062\uff79\063\uff79\064\uff79\001\002\000\022" +
    "\003\uff57\012\uff57\023\uff57\024\uff57\025\uff57\026\uff57\032" +
    "\uff57\041\uff57\001\002\000\016\012\146\023\121\024\163" +
    "\025\161\026\150\032\162\001\002\000\022\003\uff56\012" +
    "\uff56\023\uff56\024\uff56\025\uff56\026\uff56\032\uff56\041\uff56" +
    "\001\002\000\022\003\uff58\012\uff58\023\uff58\024\uff58\025" +
    "\uff58\026\uff58\032\uff58\041\uff58\001\002\000\042\027\uff7c" +
    "\030\uff7c\033\uff7c\035\uff7c\040\uff7c\041\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c" +
    "\060\uff7c\061\uff7c\001\002\000\004\055\203\001\002\000" +
    "\020\012\146\023\121\024\163\025\161\026\150\032\162" +
    "\041\144\001\002\000\012\027\uff89\033\uff89\055\uff89\056" +
    "\uff89\001\002\000\016\047\214\050\211\051\207\052\206" +
    "\053\210\054\213\001\002\000\020\012\uff61\023\uff61\024" +
    "\uff61\025\uff61\026\uff61\032\uff61\041\uff61\001\002\000\020" +
    "\012\uff63\023\uff63\024\uff63\025\uff63\026\uff63\032\uff63\041" +
    "\uff63\001\002\000\020\012\uff62\023\uff62\024\uff62\025\uff62" +
    "\026\uff62\032\uff62\041\uff62\001\002\000\020\012\uff64\023" +
    "\uff64\024\uff64\025\uff64\026\uff64\032\uff64\041\uff64\001\002" +
    "\000\020\012\146\023\121\024\163\025\161\026\150\032" +
    "\162\041\144\001\002\000\020\012\uff60\023\uff60\024\uff60" +
    "\025\uff60\026\uff60\032\uff60\041\uff60\001\002\000\020\012" +
    "\uff65\023\uff65\024\uff65\025\uff65\026\uff65\032\uff65\041\uff65" +
    "\001\002\000\012\027\uff85\033\uff85\055\uff85\056\uff85\001" +
    "\002\000\006\040\224\041\226\001\002\000\006\060\220" +
    "\061\221\001\002\000\022\003\uff5c\012\uff5c\023\uff5c\024" +
    "\uff5c\025\uff5c\026\uff5c\032\uff5c\041\uff5c\001\002\000\022" +
    "\003\uff5d\012\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\032" +
    "\uff5d\041\uff5d\001\002\000\020\012\146\023\121\024\163" +
    "\025\161\026\150\032\162\041\144\001\002\000\032\027" +
    "\uff83\030\uff83\033\uff83\035\uff83\047\uff83\050\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\001\002\000" +
    "\016\012\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\032\uff5f" +
    "\001\002\000\016\012\146\023\121\024\163\025\161\026" +
    "\150\032\162\001\002\000\016\012\uff5e\023\uff5e\024\uff5e" +
    "\025\uff5e\026\uff5e\032\uff5e\001\002\000\042\027\uff80\030" +
    "\uff80\033\uff80\035\uff80\040\uff80\041\uff80\047\uff80\050\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\060" +
    "\uff80\061\uff80\001\002\000\004\034\243\001\002\000\004" +
    "\032\234\001\002\000\004\023\233\001\002\000\072\027" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\064\uff6d\001\002\000\022\012\146\023\121\024\163" +
    "\025\161\026\150\032\162\033\uff90\041\144\001\002\000" +
    "\004\033\242\001\002\000\006\030\uff8e\033\uff8e\001\002" +
    "\000\006\030\240\033\uff91\001\002\000\020\012\146\023" +
    "\121\024\163\025\161\026\150\032\162\041\144\001\002" +
    "\000\006\030\uff8f\033\uff8f\001\002\000\056\027\uff75\030" +
    "\uff75\033\uff75\035\uff75\040\uff75\041\uff75\042\uff75\043\uff75" +
    "\044\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054" +
    "\uff75\055\uff75\056\uff75\060\uff75\061\uff75\062\uff75\063\uff75" +
    "\064\uff75\001\002\000\022\003\246\012\146\023\121\024" +
    "\163\025\161\026\150\032\162\041\144\001\002\000\072" +
    "\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054" +
    "\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\064\uff6b\001\002\000\004\035\250\001\002\000" +
    "\004\035\247\001\002\000\072\027\uff69\030\uff69\031\uff69" +
    "\032\uff69\033\uff69\034\uff69\035\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057" +
    "\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\001\002" +
    "\000\072\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034" +
    "\uff6a\035\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a" +
    "\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053" +
    "\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\064\uff6a\001\002\000\004\056\252\001" +
    "\002\000\020\012\146\023\121\024\163\025\161\026\150" +
    "\032\162\041\144\001\002\000\012\027\uff8c\033\uff8c\055" +
    "\uff8a\056\uff8c\001\002\000\060\027\uff71\030\uff71\033\uff71" +
    "\034\255\035\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71" +
    "\055\uff71\056\uff71\060\uff71\061\uff71\062\uff71\063\uff71\064" +
    "\uff71\001\002\000\020\012\146\023\121\024\163\025\161" +
    "\026\150\032\162\041\144\001\002\000\004\035\257\001" +
    "\002\000\056\027\uff70\030\uff70\033\uff70\035\uff70\040\uff70" +
    "\041\uff70\042\uff70\043\uff70\044\uff70\047\uff70\050\uff70\051" +
    "\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\060\uff70" +
    "\061\uff70\062\uff70\063\uff70\064\uff70\001\002\000\006\023" +
    "\uffa8\033\uffa8\001\002\000\006\023\121\033\uffa3\001\002" +
    "\000\004\033\uffa7\001\002\000\004\033\264\001\002\000" +
    "\024\005\uffa6\011\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6" +
    "\021\uffa6\023\uffa6\036\uffa6\001\002\000\042\027\uff7e\030" +
    "\uff7e\033\uff7e\035\uff7e\040\uff7e\041\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\060" +
    "\uff7e\061\uff7e\001\002\000\024\005\uffa5\011\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\017\uffa5\021\uffa5\023\uffa5\036\uffa5\001" +
    "\002\000\024\005\132\011\122\013\133\014\113\015\120" +
    "\017\134\021\114\023\121\036\124\001\002\000\030\005" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa" +
    "\021\uffaa\023\uffaa\036\uffaa\037\uffaa\001\002\000\020\012" +
    "\146\023\121\024\163\025\161\026\150\032\162\041\144" +
    "\001\002\000\006\030\273\033\uff9a\001\002\000\004\024" +
    "\277\001\002\000\004\033\275\001\002\000\004\027\276" +
    "\001\002\000\030\005\uff9c\007\uff9c\011\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\017\uff9c\021\uff9c\023\uff9c\036\uff9c\037\uff9c" +
    "\001\002\000\004\033\uff9b\001\002\000\030\005\uffb9\007" +
    "\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\021\uffb9" +
    "\023\uffb9\036\uffb9\037\uffb9\001\002\000\022\003\uff66\012" +
    "\uff66\023\uff66\024\uff66\025\uff66\026\uff66\032\uff66\041\uff66" +
    "\001\002\000\006\027\uff93\033\uff93\001\002\000\022\003" +
    "\314\012\uff99\023\uff99\024\uff99\025\uff99\026\uff99\032\uff99" +
    "\041\uff99\001\002\000\022\003\uff67\012\uff67\023\uff67\024" +
    "\uff67\025\uff67\026\uff67\032\uff67\041\uff67\001\002\000\022" +
    "\003\uff68\012\uff68\023\uff68\024\uff68\025\uff68\026\uff68\032" +
    "\uff68\041\uff68\001\002\000\004\032\311\001\002\000\006" +
    "\027\uff92\033\uff92\001\002\000\006\027\uff94\033\uff94\001" +
    "\002\000\022\012\146\023\121\024\163\025\161\026\150" +
    "\032\162\033\uff90\041\144\001\002\000\004\033\313\001" +
    "\002\000\006\027\uff95\033\uff95\001\002\000\006\027\uff97" +
    "\033\uff97\001\002\000\020\012\146\023\121\024\163\025" +
    "\161\026\150\032\162\041\144\001\002\000\006\027\uff98" +
    "\033\uff98\001\002\000\030\005\uffbc\007\uffbc\011\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\023\uffbc\036\uffbc" +
    "\037\uffbc\001\002\000\026\005\132\011\122\013\133\014" +
    "\113\015\120\017\134\021\114\023\121\036\124\037\321" +
    "\001\002\000\030\005\uffb4\007\uffb4\011\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\017\uffb4\021\uffb4\023\uffb4\036\uffb4\037\uffb4" +
    "\001\002\000\004\032\324\001\002\000\024\005\uffb2\011" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\021\uffb2\023\uffb2" +
    "\036\uffb2\001\002\000\022\003\326\012\146\023\121\024" +
    "\163\025\161\026\150\032\162\041\144\001\002\000\006" +
    "\033\330\056\uff8d\001\002\000\004\033\327\001\002\000" +
    "\024\005\uffac\011\uffac\013\uffac\014\uffac\015\uffac\017\uffac" +
    "\021\uffac\023\uffac\036\uffac\001\002\000\024\005\uffad\011" +
    "\uffad\013\uffad\014\uffad\015\uffad\017\uffad\021\uffad\023\uffad" +
    "\036\uffad\001\002\000\024\005\132\011\122\013\133\014" +
    "\113\015\120\017\134\021\114\023\121\036\124\001\002" +
    "\000\030\005\uffae\007\334\011\uffae\013\uffae\014\uffae\015" +
    "\uffae\017\uffae\021\uffae\023\uffae\036\uffae\037\uffae\001\002" +
    "\000\030\005\uffb1\007\uffb1\011\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\017\uffb1\021\uffb1\023\uffb1\036\uffb1\037\uffb1\001\002" +
    "\000\024\005\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\017" +
    "\uffb0\021\uffb0\023\uffb0\036\uffb0\001\002\000\024\005\132" +
    "\011\122\013\133\014\113\015\120\017\134\021\114\023" +
    "\121\036\124\001\002\000\030\005\uffaf\007\uffaf\011\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\017\uffaf\021\uffaf\023\uffaf\036" +
    "\uffaf\037\uffaf\001\002\000\004\027\uff9f\001\002\000\004" +
    "\027\341\001\002\000\030\005\uffa0\007\uffa0\011\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\017\uffa0\021\uffa0\023\uffa0\036\uffa0" +
    "\037\uffa0\001\002\000\030\005\uffb8\007\uffb8\011\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\017\uffb8\021\uffb8\023\uffb8\036\uffb8" +
    "\037\uffb8\001\002\000\004\023\121\001\002\000\010\031" +
    "\232\033\345\034\uff6c\001\002\000\004\027\346\001\002" +
    "\000\030\005\uff9d\007\uff9d\011\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\017\uff9d\021\uff9d\023\uff9d\036\uff9d\037\uff9d\001\002" +
    "\000\004\023\352\001\002\000\004\023\uffc9\001\002\000" +
    "\004\023\uffca\001\002\000\004\032\uffce\001\002\000\004" +
    "\032\355\001\002\000\006\023\uffe9\036\uffe9\001\002\000" +
    "\010\003\360\023\020\033\356\001\002\000\006\023\uffc5" +
    "\036\uffc5\001\002\000\006\030\371\033\372\001\002\000" +
    "\006\030\366\033\367\001\002\000\004\023\363\001\002" +
    "\000\006\030\uffc2\033\uffc2\001\002\000\010\030\uffc1\033" +
    "\uffc1\034\364\001\002\000\004\035\365\001\002\000\006" +
    "\030\uffc0\033\uffc0\001\002\000\004\023\020\001\002\000" +
    "\006\023\uffc6\036\uffc6\001\002\000\006\030\uffc3\033\uffc3" +
    "\001\002\000\004\023\020\001\002\000\006\023\uffc7\036" +
    "\uffc7\001\002\000\006\030\uffc4\033\uffc4\001\002\000\006" +
    "\023\020\036\uffcd\001\002\000\006\003\u0100\023\uffe8\001" +
    "\002\000\006\023\uffea\036\uffea\001\002\000\004\023\u0103" +
    "\001\002\000\010\023\uffe5\027\u0101\036\uffe5\001\002\000" +
    "\006\023\uffe6\036\uffe6\001\002\000\006\027\uffe3\030\uffe3" +
    "\001\002\000\010\027\uffe2\030\uffe2\034\u0108\001\002\000" +
    "\006\027\u0106\030\u0105\001\002\000\004\023\u0103\001\002" +
    "\000\006\023\uffe7\036\uffe7\001\002\000\006\027\uffe4\030" +
    "\uffe4\001\002\000\004\035\u0109\001\002\000\006\027\uffe1" +
    "\030\uffe1\001\002\000\012\016\uffcb\022\106\023\uffcb\037" +
    "\u010b\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\053\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\014\004\013\007\012\022\010\023\014\062" +
    "\015\001\001\000\002\001\001\000\004\032\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\061\001" +
    "\001\000\004\106\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\022\001\001\000" +
    "\004\105\023\001\001\000\006\005\024\006\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\041" +
    "\001\001\000\004\062\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\050\011\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\057\001\001\000\002\001\001\000\004" +
    "\016\062\001\001\000\002\001\001\000\010\017\066\026" +
    "\064\062\065\001\001\000\004\032\101\001\001\000\002" +
    "\001\001\000\004\110\067\001\001\000\002\001\001\000" +
    "\006\020\072\021\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\102\030\104\033" +
    "\103\001\001\000\002\001\001\000\006\062\347\072\346" +
    "\001\001\000\004\031\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\111\001\001\000\002\001\001" +
    "\000\022\035\114\036\126\041\127\045\124\047\122\050" +
    "\116\051\125\054\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\046\337\054\151\055\336\056\153\057\150" +
    "\060\157\061\156\001\001\000\002\001\001\000\004\112" +
    "\321\001\001\000\002\001\001\000\004\034\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\064\302\066\303\070\300\071\307" +
    "\122\305\133\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\134\001\001\000\004\115\266\001\001" +
    "\000\010\043\140\051\137\054\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\142" +
    "\001\001\000\026\044\144\054\151\055\154\056\153\057" +
    "\150\060\157\061\156\102\146\103\155\104\152\001\001" +
    "\000\012\054\151\057\264\060\157\061\156\001\001\000" +
    "\002\001\001\000\004\062\253\001\001\000\004\123\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\132" +
    "\230\133\227\001\001\000\002\001\001\000\006\126\216" +
    "\127\215\001\001\000\004\125\204\001\001\000\004\124" +
    "\201\001\001\000\002\001\001\000\006\130\165\131\166" +
    "\001\001\000\002\001\001\000\016\054\151\055\163\056" +
    "\153\057\150\060\157\061\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\175\001" +
    "\001\000\004\067\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\054\151\061\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\151" +
    "\057\200\060\157\061\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\054\151\055\154\056\153\057\150\060\157\061\156\104" +
    "\203\001\001\000\002\001\001\000\004\100\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\054\151\055\214\056\153\057\150" +
    "\060\157\061\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\224\001\001\000\004" +
    "\066\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\054\151\055\222\056\153\057\150\060\157\061\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\054" +
    "\151\057\226\060\157\061\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\052\234" +
    "\054\151\055\235\056\153\057\150\060\157\061\156\077" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\054\151\055\240\056\153\057\150\060" +
    "\157\061\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\054\151\055\244\056\153\057\150\060\157\061" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\054\151\055\154\056\153\057\150\060\157" +
    "\061\156\103\252\104\152\001\001\000\004\124\201\001" +
    "\001\000\002\001\001\000\016\054\151\055\255\056\153" +
    "\057\150\060\157\061\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\260\001\001\000\010\043\261" +
    "\051\137\054\130\001\001\000\004\120\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\035\267\036\126\041\127\045\124\047" +
    "\122\050\116\051\125\054\130\001\001\000\002\001\001" +
    "\000\016\054\151\055\271\056\153\057\150\060\157\061" +
    "\156\001\001\000\004\073\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\052\311\054\151\055\235\056\153\057" +
    "\150\060\157\061\156\077\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\054\151\055" +
    "\315\056\153\057\150\060\157\061\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\035\114\036\126\041" +
    "\127\045\124\047\122\050\116\051\125\054\130\001\001" +
    "\000\002\001\001\000\004\040\322\001\001\000\004\113" +
    "\330\001\001\000\024\054\151\055\154\056\153\057\150" +
    "\060\157\061\156\102\324\103\155\104\152\001\001\000" +
    "\004\123\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\035\331\036\126\041\127\045" +
    "\124\047\122\050\116\051\125\054\130\001\001\000\004" +
    "\037\332\001\001\000\002\001\001\000\004\114\334\001" +
    "\001\000\022\035\335\036\126\041\127\045\124\047\122" +
    "\050\116\051\125\054\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\343\001\001\000\004\133\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\111\352\001" +
    "\001\000\004\074\353\001\001\000\004\012\373\001\001" +
    "\000\010\062\360\075\361\076\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\360\075\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\062\360\075\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\375" +
    "\062\374\001\001\000\004\107\376\001\001\000\002\001" +
    "\001\000\006\014\u0103\015\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\102\030\104\033\103\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	SymbolTable.init();

    }



	public static int globalVarCount = 0;
	public static int mainVarCount = 0;
	public static int constCount = 0;
	public static int globalArrayVarCount = 0;
	public static int functionCount = 0;
	public static int blockStatementsCount = 0;
	public static int functionCallCount = 0;
	public static int formalParamCount = 0;

	private static boolean errorReported = false;

	public static final Logger logger = LogManager.getLogger(Parser.class);

	public static int INIT_BYTE_ARRAY = 0;
	public static int INIT_WORD_ARRAY = 1;
	public static int EQ_OPERATOR = 0;
	public static int ERROR_OPERATOR = -1;

	public static int AND_OPERATOR = 0;
	public static int OR_OPERATOR = 1;
	public static int ELSE_BRANCH = 2;
	public static int DESIGNATOR_STATEMENT = 3;
	public static int BREAK_STATEMENT = 4;

	public static class FixUpAddress {
		public int adr;
		public int operator;
		public int level;
		
		public FixUpAddress(int adr ,int operator, int level) {
			this.adr = adr;
			this.operator = operator;
			this.level = level;
		}
	}

	public static void main(String argv[]) {
		try(BufferedReader reader = new BufferedReader(new FileReader(argv[0]))){

				logger.info("Parsing source file: " + argv[0]);

				Lexer lexer = new Lexer(reader);
				Parser parser = new Parser(lexer);

				logger.info("============= Semantic analysis =============");

				Symbol symbol = parser.parse();

				logger.info("============= Syntax analysis ===============");
				logger.info("Global variables:" + parser.globalVarCount);
				logger.info("Local variables in main:" + parser.mainVarCount);
				logger.info("Global constants:" + parser.constCount);
				logger.info("Global arrays:" + parser.globalArrayVarCount);
				logger.info("Global and static functions:" + parser.functionCount);
				logger.info("Block statements:" + parser.blockStatementsCount);
				logger.info("Function calls:" + parser.functionCallCount);
				logger.info("Formal parameters:" + parser.formalParamCount);

				if(parser.errorReported){
					logger.info("Source file contains error(s)!");
				} else {
					File objFile = new File("output/program.obj");
					if (objFile.exists()) {
						objFile.delete();
					}
					Code.write(new FileOutputStream(objFile));
					logger.info("Source file successfully parsed!");
				}

				SymbolTable.dump();

		} catch (Exception e) {
				e.printStackTrace();
		}
	}

	public static Struct newArrayType(Struct type) {
			return new Struct(Struct.Array, type);
	}

	public static Struct newClassType() {
			return new Struct(Struct.Class);
	}

	public static Obj newObj(int kind, String name, Struct type) {
		return new Obj(kind, name, type);
	}

	public static String visitNode(Obj node){
		 SymbolTableVisitor symbolTableVisitor= new DumpSymbolTableVisitorExtended();
		 node.accept(symbolTableVisitor);
		 return symbolTableVisitor.getOutput();
	}

	public static Obj findInScope(String symbolName) {
			Obj resultObj = SymbolTable.currentScope().findSymbol(symbolName);
			return (resultObj != null) ? resultObj : SymbolTable.noObj;
	}

	public static FixUpAddress newFixUpAddress(int adr, int operator, int level) {
			return new FixUpAddress(adr, operator, level);
	}

	public static boolean isMain(Obj obj) {
			if(obj != null && obj.getKind() == Obj.Meth && obj.getName().equals("main")) {
					return true;
			}
			return false;
	}

	public static boolean isVoid(Obj obj) {
			if(obj != null && obj.getKind() == Obj.Meth && obj.getType() == SymbolTable.noType) {
					return true;
			}
			return false;
	}

	public static boolean isAssignable(Obj obj) {
		if(obj != null && (obj.getKind() == Obj.Var || obj.getKind() == Obj.Fld || obj.getKind() == Obj.Elem)) {
			return true;
		}
		return false;
	}

	public static boolean isOperand(Obj obj) {
		if(obj != null && (obj.getKind() == Obj.Var || obj.getKind() == Obj.Fld || obj.getKind() == Obj.Elem || obj.getKind() == Obj.Con)) {
			return true;
		}
		return false;
	}

	public void syntax_error(Symbol symbol) {
			report_error("Syntax error:", symbol);
	}

	public void unrecovered_syntax_error(Symbol symbol) throws java.lang.Exception {
			report_fatal_error("Fatal error: stopping with parsing the file", symbol);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void report_error(String message, Object info) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder(message); 
		if (info instanceof Symbol){
			Symbol symbol = (Symbol) info;
			if(symbol.value != null){
				stringBuilder.append(" on line ").append(symbol.left)
					.append(", near token '").append(symbol.value.toString()).append("'");
			} else {
				stringBuilder.append(" on line ").append(symbol.left);
			}
		}
		logger.error(stringBuilder.toString());
	}

	public void report_semantic_error(String message, int line) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder("Semantic error:"); 
		if(message != null){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(", reason: ").append(message);
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.error(stringBuilder.toString());
	}

	public void report_debug(String message, Object info, int line) {
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" till token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.debug(stringBuilder.toString());
	}

	public void report_info(String message, Object info, int line) {
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" with token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.info(stringBuilder.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	Struct currentType = SymbolTable.noType;
	Obj currentClass = null;
	Obj currentMethod = null;
	Obj currentCallMethod = null;
	Obj currentArrayDesignator = null;
	boolean returnStatementExists = false;
	boolean mainDefined = false;
	boolean forScope = false;
	int dataCount = 0;
	LinkedList<Parser.FixUpAddress> fixUpAddresses = new LinkedList<>();
	int currentIFLevel = 0;
	int conditionAddress, fixConditionAddress, designatorAddress;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // muloperatorright ::= MULTEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.mul;	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // muloperatorright ::= DIVEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.div;	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // muloperatorright ::= MODEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.rem;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorright",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // muloperatorleft ::= MOD 
            {
              Integer RESULT =null;
		
		RESULT = Code.rem;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // muloperatorleft ::= DIV 
            {
              Integer RESULT =null;
		
		RESULT = Code.div;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // muloperatorleft ::= MULT 
            {
              Integer RESULT =null;
		
		RESULT = Code.mul;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("muloperatorleft",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // addoperatorright ::= PLUSEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.add;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // addoperatorright ::= MINUSEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.sub;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorright",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // addoperatorleft ::= MINUS 
            {
              Integer RESULT =null;
		
		RESULT = Code.sub;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // addoperatorleft ::= PLUS 
            {
              Integer RESULT =null;
		
		RESULT = Code.add;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addoperatorleft",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // reloperator ::= LTEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.le;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // reloperator ::= LT 
            {
              Integer RESULT =null;
		
		RESULT = Code.lt;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // reloperator ::= GTEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.ge;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // reloperator ::= GT 
            {
              Integer RESULT =null;
		
		RESULT = Code.gt;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // reloperator ::= NOTEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.ne;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // reloperator ::= EQEQ 
            {
              Integer RESULT =null;
		
		RESULT = Code.eq;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reloperator",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // assignoperator ::= muloperatorright 
            {
              Integer RESULT =null;
		int muloperatorrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muloperatorrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer muloperatorright = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = muloperatorright;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // assignoperator ::= addoperatorright 
            {
              Integer RESULT =null;
		int addoperatorrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addoperatorrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer addoperatorright = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = addoperatorright;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // assignoperator ::= EQ 
            {
              Integer RESULT =null;
		
		RESULT = parser.EQ_OPERATOR;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignoperator",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // indexexpression ::= LBRACK error RBRACK 
            {
              Obj RESULT =null;
		int rbrackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbrackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rbrack = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", rbrack, rbrackleft); 
		RESULT = SymbolTable.noObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexexpression",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // indexexpression ::= LBRACK expression RBRACK 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		Obj elemObj = SymbolTable.noObj;
		if(currentArrayDesignator != null) {
			if(expression.getType().getKind() == Struct.Int) {
				elemObj = parser.newObj(Obj.Elem, currentArrayDesignator.getName() + "[" + expression.getName() + "]", currentArrayDesignator.getType().getElemType());
				parser.report_info("'" + elemObj.getName() + "' found", parser.visitNode(currentArrayDesignator), expressionleft);
			} else {
				parser.report_semantic_error("Expression isn't an int type", expressionleft);
			}
		}
		RESULT = elemObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexexpression",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // designator ::= designator NT$22 indexexpression 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrayelemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayelemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj arrayelem = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = arrayelem;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$22 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(designator.getType().getKind() == Struct.Array) {
			Code.load(designator);
			currentArrayDesignator = designator;
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must represent an array", designatorleft);
			currentArrayDesignator =  null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // designator ::= designator DOT IDENTIFIER 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int classmemberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classmemberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String classmember = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(designator.getType().getKind() == Struct.Class) {
			parser.report_info("Field acces", designator.getName(), designatorleft);
			//TO DO: ident must be a field or a method of given class
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must represent a class", designatorleft);
		}
		RESULT = SymbolTable.noObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // designator ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj obj = SymbolTable.find(name);
		if(obj == SymbolTable.noObj) {
			parser.report_semantic_error("'" + name + "' isn't declared", nameleft);
		} else if(obj.getKind() == Obj.Prog || obj.getKind() == Obj.Type) {
			parser.report_semantic_error("'" + name + "' isn't an operand", nameleft);
			obj = SymbolTable.noObj;
		} else if(obj.getKind() == Obj.Var || obj.getKind() == Obj.Con) {
			parser.report_info("'" + name + "' found", parser.visitNode(obj), nameleft);
		}
		RESULT = obj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // factor ::= LPAREN expression RPAREN 
            {
              Obj RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = expression;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // factor ::= NEW type LBRACK expression RBRACK 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		Obj arrayObj = SymbolTable.noObj;
		if(expression.getType().getKind() == Struct.Int) {
			arrayObj = parser.newObj(Obj.Con, "", parser.newArrayType(type));
			Code.put(Code.newarray);
			if(type.getKind() == Struct.Char) {
				Code.put(parser.INIT_BYTE_ARRAY);
			} else {
				Code.put(parser.INIT_WORD_ARRAY);
			}
		} else {
			parser.report_semantic_error("Expression isn't an int type", expressionleft);
		}
		RESULT = arrayObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // factor ::= NEW type 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj classObj = SymbolTable.noObj;
		if(type.getKind() == Struct.Class) {
			// TO DO: new class object
		} else {
			parser.report_semantic_error("Type ins't an inner defined class", typeleft);
		}
		RESULT = classObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // factor ::= BOOL_LITERAL 
            {
              Obj RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj boolObj = parser.newObj(Obj.Con, Boolean.toString(bool), SymbolTable.boolType);
		boolObj.setAdr(((boolean)bool) ? 1 : 0);
		Code.load(boolObj);
		RESULT = boolObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // factor ::= CHAR_LITERAL 
            {
              Obj RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character character = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj charObj = parser.newObj(Obj.Con, Character.toString(character), SymbolTable.charType);
		charObj.setAdr(character.charValue());
		Code.load(charObj);
		RESULT = charObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // factor ::= INTEGER_LITERAL 
            {
              Obj RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj integerObj = parser.newObj(Obj.Con, Integer.toString(integer), SymbolTable.intType);
		integerObj.setAdr(integer.intValue());
		Code.load(integerObj);
		RESULT = integerObj;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // factor ::= designator NT$21 LPAREN actparametersopt RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		if(currentCallMethod != null) {
			if(parser.isMain(currentMethod)) {
				parser.functionCallCount++;
			}
			int destAdress = designator.getAdr() - Code.pc;
			Code.put(Code.call);
			Code.put2(destAdress);
			parser.report_info("'" + designator.getName() + "' found", parser.visitNode(designator), designatorleft);
			RESULT = parser.newObj(Obj.Con, "", designator.getType());
		} else {
			parser.report_error("'" + designator.getName() + "' must be a method", designatorleft);
			RESULT = SymbolTable.noObj;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$21 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(designator.getKind() == Obj.Meth) {
			currentCallMethod = designator;
		} else {
			currentCallMethod = null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // factor ::= designator 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(!parser.isOperand(designator)){
			parser.report_semantic_error("'" + designator.getName() + "' isn't an operand", designatorleft);
		} else if(designator.getKind() != Obj.Elem) {
			Code.load(designator);
		}
		RESULT = designator;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // termleft ::= factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = factor;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termleft",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // termleft ::= termleft NT$20 muloperatorleft factor 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int termleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj termleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int muloperatorleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int muloperatorleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer muloperatorleft = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(termleft.getType().getKind() == Struct.Int && termleft.getType().equals(factor.getType())){
			if(factor.getKind() == Obj.Elem){
				Code.load(factor);
			}
			Code.put(muloperatorleft);
			RESULT = parser.newObj(Obj.Con, "", SymbolTable.intType);
		} else {
			parser.report_semantic_error("Terminal and factor differ in type or not int type", termleftleft);
			RESULT = SymbolTable.noObj;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termleft",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$20 ::= 
            {
              Obj RESULT =null;
		int termleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(termleft.getKind() == Obj.Elem) {
			Code.load(termleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // term ::= termleft 
            {
              Obj RESULT =null;
		int termleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = termleft;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // term ::= termleft NT$19 muloperatorright term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int termleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj termleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int muloperatorrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int muloperatorrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer muloperatorright = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termright = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.isAssignable(termleft)) {
			if(termleft.getType().getKind() == Struct.Int && termleft.getType().equals(termright.getType())){
				if(termright.getKind() == Obj.Elem) {
					Code.load(termright);
				}
				Code.put(muloperatorright);
				if(termleft.getKind() == Obj.Elem) {
					Code.put(Code.dup_x2);
				} else {
					Code.put(Code.dup); 
				}
				Code.store(termleft);
				RESULT = termleft;
			} else {
				parser.report_semantic_error("Terminal and factor differ in type or not int type", termleftright);
				RESULT = SymbolTable.noObj;
			}
		} else {
			parser.report_semantic_error("'" + termleft.getName() + "' must be a variable, class field or array element", termleftleft);
			RESULT = SymbolTable.noObj;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$19 ::= 
            {
              Obj RESULT =null;
		int termleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj termleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(termleft.getKind() == Obj.Elem) {
			Code.put(Code.dup2);
			Code.load(termleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expressionleft ::= MINUS term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(term.getType().getKind() == Struct.Int) {
			if(term.getKind() == Obj.Elem) {
				Code.load(term);
			}
			Code.put(Code.neg);
		} else {
			parser.report_semantic_error("Terminal isn't an int type", termleft);
		}
		RESULT = term;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionleft",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expressionleft ::= term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = term;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionleft",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expressionleft ::= expressionleft NT$18 addoperatorleft term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int addoperatorleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int addoperatorleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer addoperatorleft = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(expressionleft.getType().getKind() == Struct.Int && expressionleft.getType().compatibleWith(term.getType())){
			if(term.getKind() == Obj.Elem) {
				Code.load(term);
			}
			Code.put(addoperatorleft);
			RESULT = parser.newObj(Obj.Con, "", SymbolTable.intType);
		} else {
			parser.report_semantic_error("Expression and terminal differ in type or not int type", expressionleftleft);
			RESULT = SymbolTable.noObj;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionleft",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$18 ::= 
            {
              Obj RESULT =null;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(expressionleft.getKind() == Obj.Elem) {
			Code.load(expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expressionleft 
            {
              Obj RESULT =null;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = expressionleft;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expressionleft NT$17 addoperatorright expression 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int addoperatorrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int addoperatorrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer addoperatorright = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.isAssignable(expressionleft)) {
			if(expressionleft.getType().getKind() == Struct.Int && expressionleft.getType().compatibleWith(e.getType())){
				if(e.getKind() == Obj.Elem) {
					Code.load(e);
				}
				Code.put(addoperatorright);
				if(expressionleft.getKind() == Obj.Elem) {
					Code.put(Code.dup_x2);
				} else {
					Code.put(Code.dup); 
				}
				Code.store(expressionleft);
				RESULT = expressionleft;
			} else {
				parser.report_semantic_error("Expression and terminal differ in type or not int type", expressionleftleft);
				RESULT = SymbolTable.noObj;
			}
		} else {
			parser.report_semantic_error("'" + expressionleft.getName() + "' must be a variable, class field or array element", expressionleftleft);
			RESULT = SymbolTable.noObj;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$17 ::= 
            {
              Obj RESULT =null;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(expressionleft.getKind() == Obj.Elem) {
			Code.put(Code.dup2);
			Code.load(expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // conditionfact ::= expression NT$16 reloperator expression 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int reloperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int reloperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer reloperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionrightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionrightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expressionright = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(expressionleft.getType().compatibleWith(expressionright.getType())){
			if((expressionleft.getType().getKind() == Struct.Array || expressionright.getType().getKind() == Struct.Class) 
				&& (reloperator != Code.eq && reloperator != Code.ne)) {
				parser.report_semantic_error("Variables of type class or array can't use this reloperator", reloperatorleft);
				RESULT = parser.ERROR_OPERATOR;
			} else {
				if(expressionright.getKind() == Obj.Elem) {
					Code.load(expressionright);
				}
				RESULT = reloperator;
			}
		} else {
			parser.report_semantic_error("Left expression '" + expressionleft.getName() + "' isn't compatible with right expression '" + expressionright.getName() + "'", expressionleftleft);
			RESULT = parser.ERROR_OPERATOR;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfact",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$16 ::= 
            {
              Integer RESULT =null;
		int expressionleftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionleftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expressionleft = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(expressionleft.getKind() == Obj.Elem) {
			Code.load(expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // conditionfact ::= expression 
            {
              Integer RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(expression.getType().getKind() == Struct.Bool) {
			Code.loadConst(1);
			RESULT = Code.eq;
		} else {
			parser.report_semantic_error("'" + expression.getName() + "' must be bool type", expressionleft);
			RESULT = parser.ERROR_OPERATOR;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionfact",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // conditionterm ::= conditionfact 
            {
              Integer RESULT =null;
		int reloperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = reloperator;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // conditionterm ::= conditionterm NT$15 ANDAND conditionfact 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int reloperatortermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reloperatortermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer reloperatorterm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int reloperatorfactleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatorfactright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperatorfact = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = reloperatorfact;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionterm",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$15 ::= 
            {
              Integer RESULT =null;
		int reloperatortermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatortermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperatorterm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(reloperatorterm != parser.ERROR_OPERATOR) {
			Code.putFalseJump(reloperatorterm, 0);
			fixUpAddresses.addFirst(parser.newFixUpAddress(Code.pc - 2, parser.AND_OPERATOR, currentIFLevel));
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condition ::= conditionterm 
            {
              Integer RESULT =null;
		int reloperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = reloperator;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condition ::= condition NT$14 OROR conditionterm 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int reloperatorcondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reloperatorcondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer reloperatorcond = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int reloperatortermleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatortermright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperatorterm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = reloperatorterm;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$14 ::= 
            {
              Integer RESULT =null;
		int reloperatorcondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatorcondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperatorcond = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(reloperatorcond != parser.ERROR_OPERATOR) {
			Code.putFalseJump(Code.inverse[reloperatorcond], 0);
			fixUpAddresses.add(parser.newFixUpAddress(Code.pc - 2, parser.OR_OPERATOR, currentIFLevel));
			Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
			while(fixUpAddressesIterator.hasNext()){
				Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
				if(fixUpAddress.operator == parser.AND_OPERATOR) {
					Code.fixup(fixUpAddress.adr);
					fixUpAddressesIterator.remove();
				}
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // actparameters ::= expression 
            {
              Collection<Obj> RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Collection<Obj> actparameters = new LinkedList<>();
		actparameters.add(expression);
		RESULT = actparameters;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // actparameters ::= actparameters COMMA expression 
            {
              Collection<Obj> RESULT =null;
		int actparametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int actparametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Collection<Obj> actparameters = (Collection<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		actparameters.add(expression);
		RESULT = actparameters;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparameters",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // actparametersopt ::= 
            {
              Object RESULT =null;
		
		if(currentCallMethod != null && currentCallMethod.getLevel() != 0) {
			parser.report_semantic_error("Actual(0) and formal(" + currentCallMethod.getLevel() + ") parameters differ in length", 0);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // actparametersopt ::= actparameters 
            {
              Object RESULT =null;
		int actparametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actparametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Collection<Obj> actparameters = (Collection<Obj>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(currentCallMethod != null) {
			if(actparameters.size() == currentCallMethod.getLevel()){
				Iterator<Obj> formalParameters = currentCallMethod.getLocalSymbols().iterator();
				Iterator<Obj> actParameters = actparameters.iterator();
				while(actParameters.hasNext()){
					Obj formalParameter = formalParameters.next();
					Obj actParameter = actParameters.next();
					if(!formalParameter.getType().compatibleWith(actParameter.getType())) {
						parser.report_semantic_error("Actual parameter '" + actParameter.getName() + "' parameter isn't compatible with formal parameter '" + formalParameter.getName() + "'", actparametersleft);
					}
				}
			} else {
				parser.report_semantic_error("Actual(" + actparameters.size() + ") and formal(" + currentCallMethod.getLevel() + ") parameters differ in length", actparametersleft);
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actparametersopt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // designatoroperator ::= MINUSMINUS 
            {
              Integer RESULT =null;
		
		RESULT = Code.sub;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatoroperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // designatoroperator ::= PLUSPLUS 
            {
              Integer RESULT =null;
		
		RESULT = Code.add;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatoroperator",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // designatorstatement ::= designator designatoroperator 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer operator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.isAssignable(designator)) {
			if(designator.getType().getKind() == Struct.Int) {
				if(designator.getKind() == Obj.Elem) {
					Code.put(Code.dup2);
				}
				Code.load(designator);
				Code.loadConst(1);
				Code.put(operator);
				Code.store(designator);
			} else {
				parser.report_semantic_error("'" + designator.getName() + "' must be an int type", designatorleft);
			}
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must be a variable, class field or array element", designatorleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // designatorstatement ::= designator NT$13 LPAREN actparametersopt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		if(currentCallMethod != null) {
			if(parser.isMain(currentMethod)) {
				parser.functionCallCount++;
			}
			int destAdress = designator.getAdr() - Code.pc;
			Code.put(Code.call);
			Code.put2(destAdress);
			parser.report_info("'" + designator.getName() + "' found", parser.visitNode(designator), designatorleft);
			if(designator.getType() != SymbolTable.noType) {
				Code.put(Code.pop);
			}
		} else {
			parser.report_error("'" + designator.getName() + "' must be a method", designatorleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$13 ::= 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(designator.getKind() == Obj.Meth) {
			currentCallMethod = designator;
		} else {
			currentCallMethod = null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // designatorstatement ::= designator assignoperator error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		parser.report_debug("Error recovery done", null, eleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // designatorstatement ::= designator assignoperator NT$12 expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int assignoperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int assignoperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer assignoperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Struct designatorType = designator.getType().getKind() == Struct.Array ? designator.getType().getElemType() : designator.getType();
		Struct expressionType = expression.getType().getKind() == Struct.Array ? expression.getType().getElemType() : expression.getType();
		if(expressionType.assignableTo(designatorType)) {
			if(expression.getKind() == Obj.Elem) {
				Code.load(expression);
			}
			if(assignoperator != parser.EQ_OPERATOR) {
				Code.put(assignoperator);
			}
			Code.store(designator);
		} else {
			parser.report_semantic_error("Expression type must be assignable with '" + designator.getName() + "'", expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$12 ::= 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assignoperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignoperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer assignoperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(parser.isAssignable(designator)) {
			if(assignoperator != parser.EQ_OPERATOR){
				if(designator.getKind() == Obj.Elem) {
					Code.put(Code.dup2);
				}
				Code.load(designator);
			}
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must be a variable, class field or array element", designatorleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // integerliteralopt ::= 
            {
              Integer RESULT =null;
		
		RESULT = 0;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // integerliteralopt ::= COMMA INTEGER_LITERAL 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = integer;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerliteralopt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // printstatement ::= PRINT LPAREN expression integerliteralopt RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(expression.getKind() == Obj.Elem) {
			Code.load(expression);
		}
		if(expression.getType().getKind() == Struct.Int){
			Code.loadConst(n);
			Code.put(Code.print);
		} else if (expression.getType().getKind() == Struct.Char) {
			Code.loadConst(n);
			Code.put(Code.bprint);
		} else if (expression.getType().getKind() == Struct.Bool) {
			Code.loadConst(n);
			Code.put(Code.print);
		} else {
			parser.report_semantic_error("Expression isn't an int,char or bool type", expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printstatement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // readstatement ::= READ LPAREN designator RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(parser.isAssignable(designator)) {
			if(designator.getType().getKind() == Struct.Int || designator.getType().getKind() == Struct.Bool) {
				Code.put(Code.read);
				Code.store(designator);
			} else if(designator.getType().getKind() == Struct.Char) {
				Code.put(Code.bread);
				Code.store(designator);
			} else {
				parser.report_semantic_error("'" + designator.getName() + "' must be an int,char or bool type", designatorleft);
			}
		} else {
			parser.report_semantic_error("'" + designator.getName() + "' must be a variable, class field or array element", designatorleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expressionopt ::= 
            {
              Object RESULT =null;
		
		returnStatementExists = true;
		if(!parser.isVoid(currentMethod)) {
			parser.report_semantic_error("Method must have a return statement with expression", 0);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expressionopt ::= expression 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj expression = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		returnStatementExists = true;	
		if(parser.isVoid(currentMethod)) {
			parser.report_semantic_error("Method can't have a return statement with expression, declared void", expressionleft);
		} else if(!expression.getType().equals(currentMethod.getType())){
			parser.report_semantic_error("Return expression doesn't match method return type", expressionleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionopt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // returnstatement ::= RETURN expressionopt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnstatement",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conditionopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conditionopt ::= condition 
            {
              Object RESULT =null;
		int reloperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reloperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer reloperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(reloperator != parser.ERROR_OPERATOR) {
			Code.putFalseJump(reloperator, 0);
			fixUpAddresses.addFirst(parser.newFixUpAddress(Code.pc - 2, parser.AND_OPERATOR, currentIFLevel));
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionopt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // designatorstatementopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // designatorstatementopt ::= designatorstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designatorstatementopt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // forexpressions ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", rparen, rparenleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forexpressions",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // forexpressions ::= LPAREN designatorstatementopt SEMICOLON NT$9 conditionopt SEMICOLON NT$10 designatorstatementopt NT$11 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forexpressions",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

		Code.putJump(conditionAddress);
		Code.fixup(fixConditionAddress);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 
		Code.putJump(0);
		fixConditionAddress = Code.pc - 2;
		fixUpAddresses.addFirst(parser.newFixUpAddress(Code.pc, parser.DESIGNATOR_STATEMENT, currentIFLevel));
		/* designatorAddress = Code.pc;  */
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$9 ::= 
            {
              Object RESULT =null;
 
		conditionAddress = Code.pc; 
		currentIFLevel++;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // forstatement ::= FOR forexpressions NT$8 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		/* Code.putJump(designatorAddress); */
		Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
		while(fixUpAddressesIterator.hasNext()){
			Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
			if(fixUpAddress.level == currentIFLevel) { 
				if(fixUpAddress.operator == parser.DESIGNATOR_STATEMENT) {
					Code.putJump(fixUpAddress.adr);
				} else {
					Code.fixup(fixUpAddress.adr);
				}
				fixUpAddressesIterator.remove();
			} else {
				break;
			}
		}
		currentIFLevel--;
		forScope = false;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$8 ::= 
            {
              Object RESULT =null;

		forScope = true;
		Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
		while(fixUpAddressesIterator.hasNext()){
			Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
			if(fixUpAddress.level == currentIFLevel && fixUpAddress.operator == parser.OR_OPERATOR) {
				Code.fixup(fixUpAddress.adr);
				fixUpAddressesIterator.remove();
			} else {
				break;
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ifcondition ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", rparen, rparenleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifcondition",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ifcondition ::= LPAREN condition RPAREN 
            {
              Object RESULT =null;
		int reloperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int reloperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer reloperator = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(reloperator != parser.ERROR_OPERATOR) {
			Code.putFalseJump(reloperator, 0);
			fixUpAddresses.addFirst(parser.newFixUpAddress(Code.pc - 2, parser.AND_OPERATOR, currentIFLevel));
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifcondition",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elsestatement ::= 
            {
              Object RESULT =null;
		
		Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
		while(fixUpAddressesIterator.hasNext()){
			Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
			if(fixUpAddress.level == currentIFLevel) { 
				Code.fixup(fixUpAddress.adr);
				fixUpAddressesIterator.remove();
			} else {
				break;
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsestatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elsestatement ::= ELSE NT$7 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		/* Code.fixup(fixUpAddresses.remove().adr); */
		Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
		while(fixUpAddressesIterator.hasNext()){
			Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
			if(fixUpAddress.level == currentIFLevel && fixUpAddress.operator == parser.ELSE_BRANCH) { 
				Code.fixup(fixUpAddress.adr);
				fixUpAddressesIterator.remove();
			} else {
				break;
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsestatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$7 ::= 
            {
              Object RESULT =null;

		Code.putJump(0);
		fixUpAddresses.addFirst(parser.newFixUpAddress(Code.pc - 2, parser.ELSE_BRANCH, currentIFLevel));
		Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
		while(fixUpAddressesIterator.hasNext()){
			Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
			if(fixUpAddress.level == currentIFLevel && fixUpAddress.operator != parser.ELSE_BRANCH) { 
				Code.fixup(fixUpAddress.adr);
				fixUpAddressesIterator.remove();
			} else if(fixUpAddress.level != currentIFLevel) {
				break;
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifstatement ::= IF NT$5 ifcondition NT$6 statement elsestatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		currentIFLevel--;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

		Iterator<Parser.FixUpAddress> fixUpAddressesIterator = fixUpAddresses.iterator();
		while(fixUpAddressesIterator.hasNext()){
			Parser.FixUpAddress fixUpAddress = fixUpAddressesIterator.next();
			if(fixUpAddress.level == currentIFLevel && fixUpAddress.operator == parser.OR_OPERATOR) {
				Code.fixup(fixUpAddress.adr);
				fixUpAddressesIterator.remove();
			}
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$5 ::= 
            {
              Object RESULT =null;

		currentIFLevel++;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;
		
		parser.blockStatementsCount++;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= printstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= readstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= returnstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		int continuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int continuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object continues = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(forScope){
			Code.putJump(fixUpAddresses.stream().filter(a -> a.operator == parser.DESIGNATOR_STATEMENT).findFirst().get().adr);
		} else {
			parser.report_semantic_error("Continue statement can only be used inside for loop", continuesleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		int breaksleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int breaksright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object breaks = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(forScope){
			Code.putJump(0);
			fixUpAddresses.addFirst(parser.newFixUpAddress(Code.pc - 2, parser.BREAK_STATEMENT, currentIFLevel));
		} else {
			parser.report_semantic_error("Break statement can only be used inside for loop", breaksleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= forstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= ifstatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= designatorstatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= IDENTIFIER 
            {
              Struct RESULT =null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Obj typeNode = SymbolTable.find(typename);
		if (typeNode == SymbolTable.noObj) {
			parser.report_semantic_error("Type not found in symbol table '" + typename + "'", typenameleft);
			RESULT = SymbolTable.noType;
		} else if(Obj.Type == typeNode.getKind()) {
			RESULT = typeNode.getType();
		} else {
			parser.report_semantic_error("'" + typename + "' doesn't represent a type", typenameleft);
			RESULT = SymbolTable.noType;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // formalparameter ::= type IDENTIFIER LBRACK RBRACK 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String arrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		SymbolTable.insert(Obj.Var, arrayname, parser.newArrayType(type));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // formalparameter ::= type IDENTIFIER 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		SymbolTable.insert(Obj.Var, name, type);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameter",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // formalparameters ::= formalparameter 
            {
              Integer RESULT =null;
		
		RESULT = new Integer(1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // formalparameters ::= error COMMA formalparameter 
            {
              Integer RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		parser.report_debug("Error recovery done", comma, commaleft); 
		RESULT = new Integer(0);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // formalparameters ::= formalparameters COMMA formalparameter 
            {
              Integer RESULT =null;
		int nformalparamatersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nformalparamatersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer nformalparamaters = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = new Integer(nformalparamaters.intValue() + 1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formalparameteropt ::= LPAREN RPAREN 
            {
              Integer RESULT =null;
		
		RESULT = 0;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formalparameteropt ::= LPAREN error RPAREN 
            {
              Integer RESULT =null;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", rparen, rparenleft); 
		RESULT = 0;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formalparameteropt ::= LPAREN formalparameters RPAREN 
            {
              Integer RESULT =null;
		int nformalparamatersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nformalparamatersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer nformalparamaters = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		parser.formalParamCount += nformalparamaters;
		RESULT = nformalparamaters;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalparameteropt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // methodbody ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SymbolTable.chainLocalSymbols(currentMethod);
		SymbolTable.closeScope();
		if(!parser.isVoid(currentMethod) && !returnStatementExists) {
			//parser.report_semantic_error("Method must have a return statement declared as non void type", rbraceleft);
			Code.put(Code.trap); 
			Code.put(1);
		} else {
			Code.put(Code.exit);
			Code.put(Code.return_);
		}
		returnStatementExists = false;
		currentMethod = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodbody",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // methodreturntype ::= type 
            {
              Struct RESULT =null;
		int returntypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int returntyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct returntype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = returntype;	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // methodreturntype ::= VOID 
            {
              Struct RESULT =null;
		
		RESULT = SymbolTable.noType;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodreturntype",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // staticopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // staticopt ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticopt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // methodheader ::= staticopt methodreturntype IDENTIFIER NT$4 formalparameteropt localvardeclarations 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int methodreturntypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int methodreturntyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Struct methodreturntype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int methodnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methodnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String methodname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nformalparamatersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nformalparamatersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer nformalparamaters = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		currentMethod.setAdr(Code.pc);
		currentMethod.setLevel(nformalparamaters);
		Code.put(Code.enter);
		Code.put(currentMethod.getLevel());
		Code.put(SymbolTable.currentScope().getnVars());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodheader",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT =null;
		int methodreturntypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodreturntyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct methodreturntype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int methodnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methodnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String methodname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		currentMethod = SymbolTable.insert(Obj.Meth, methodname, methodreturntype);
		SymbolTable.openScope();
		if(parser.isMain(currentMethod)) {
			if(parser.isVoid(currentMethod)){
				mainDefined = true;
				Code.mainPc = Code.pc;
			} else {
				parser.report_semantic_error("Main method must be void type", methodreturntypeleft);
			}
		} else {
			parser.functionCount++;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // methoddeclaration ::= methodheader methodbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // methoddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // methoddeclarations ::= methoddeclarations methoddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddeclarations",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // classbodymethods ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // classbodymethods ::= LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbodymethods",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // classbody ::= LBRACE classfielddeclarations classbodymethods RBRACE 
            {
              Object RESULT =null;
		
		SymbolTable.chainLocalSymbols(currentClass.getType());
		SymbolTable.closeScope();
		currentClass = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classbody",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // superopt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // superopt ::= EXTENDS type 
            {
              Object RESULT =null;
		int supertypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int supertyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct supertype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(supertype.getKind() == Struct.Class) {
			parser.report_info("Class extended", null, supertypeleft);
		} else {
			parser.report_semantic_error("Type doesn't represent a class", supertypeleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("superopt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // classheader ::= CLASS IDENTIFIER superopt 
            {
              Object RESULT =null;
		int classnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int classnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String classname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(SymbolTable.find(classname) == SymbolTable.noObj){
			currentClass = SymbolTable.insert(Obj.Type, classname, parser.newClassType());
			SymbolTable.openScope();
			parser.report_info("Class declared", classname, classnameleft);
		} else {
			parser.report_semantic_error("Class name '" + classname+ "' is alraedy used", classnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classheader",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // classdeclaration ::= classheader classbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdeclaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // classfielddeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int classarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int classarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String classarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(parser.findInScope(classarrayname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Fld, classarrayname, parser.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Class array declared", classarrayname, classarraynameleft);
		} else {
			parser.report_semantic_error("Class array with name '" + classarrayname+ "' is alraedy declared", classarraynameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // classfielddeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int classfieldnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classfieldnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String classfieldname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.findInScope(classfieldname) == SymbolTable.noObj){
			SymbolTable.insert(Obj.Fld, classfieldname, currentType);
			parser.report_info("Class field declared", classfieldname, classfieldnameleft);
		} else {
			parser.report_semantic_error("Class field with name '" + classfieldname+ "' is alraedy declared", classfieldnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // classfielddeclarators ::= classfielddeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classfielddeclarators ::= classfielddeclarators COMMA classfielddeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarators",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // classfielddeclaration ::= type NT$3 classfielddeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int classfieldtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int classfieldtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct classfieldtype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;
		int classfieldtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classfieldtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct classfieldtype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = classfieldtype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // classfielddeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classfielddeclarations ::= classfielddeclarations classfielddeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classfielddeclarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // localvardeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int localarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int localarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String localarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(parser.findInScope(localarrayname) == SymbolTable.noObj){
			Obj localArray = SymbolTable.insert(Obj.Var, localarrayname, parser.newArrayType(currentType));
			parser.globalArrayVarCount++;
			parser.report_info("Local array declared", localarrayname, localarraynameleft);
		} else {
			parser.report_semantic_error("Local array with name '" + localarrayname+ "' is alraedy declared", localarraynameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // localvardeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int localvarnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int localvarnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String localvarname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(parser.findInScope(localvarname) == SymbolTable.noObj){
			Obj localVar = SymbolTable.insert(Obj.Var, localvarname, currentType);
			if(parser.isMain(currentMethod)) {
				parser.mainVarCount++;
			}
			parser.report_info("Local variable declared", localvarname, localvarnameleft);
		} else {
			parser.report_semantic_error("Local variable with name '" + localvarname+ "' is alraedy declared", localvarnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // localvardeclarators ::= localvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // localvardeclarators ::= localvardeclarators COMMA localvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarators",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localvardeclaration ::= type error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		parser.report_debug("Error recovery done", null, eleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localvardeclaration ::= type error SEMICOLON 
            {
              Object RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // localvardeclaration ::= type NT$2 localvardeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int localvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int localvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct localvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int localvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int localvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct localvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = localvartype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localvardeclarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // localvardeclarations ::= localvardeclarations localvardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localvardeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // globalvardeclarator ::= IDENTIFIER LBRACK RBRACK 
            {
              Object RESULT =null;
		int globalarraynameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalarraynameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String globalarrayname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(SymbolTable.find(globalarrayname) == SymbolTable.noObj){
			Obj globalArray = SymbolTable.insert(Obj.Var, globalarrayname, parser.newArrayType(currentType));
			parser.globalArrayVarCount++;
			globalArray.setAdr(dataCount++);
			Code.load(globalArray);
			parser.report_info("Global array declared", globalarrayname, globalarraynameleft);
		} else {
			parser.report_semantic_error("Global array with name '" + globalarrayname+ "' is alraedy declared", globalarraynameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globalvardeclarator ::= IDENTIFIER 
            {
              Object RESULT =null;
		int globalvarnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalvarnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String globalvarname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(SymbolTable.find(globalvarname) == SymbolTable.noObj){
			Obj globalVar = SymbolTable.insert(Obj.Var, globalvarname, currentType);
			parser.globalVarCount++;
			globalVar.setAdr(dataCount++);
			Code.load(globalVar);
			parser.report_info("Global variable declared", globalvarname, globalvarnameleft);
		} else {
			parser.report_semantic_error("Global variable with name '" + globalvarname+ "' is alraedy declared", globalvarnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globalvardeclarators ::= globalvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globalvardeclarators ::= error COMMA globalvardeclarator 
            {
              Object RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		parser.report_debug("Error recovery done", comma, commaleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // globalvardeclarators ::= globalvardeclarators COMMA globalvardeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globalvardeclaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // globalvardeclaration ::= type NT$1 globalvardeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int globalvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int globalvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct globalvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalvardeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int globalvartypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalvartyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct globalvartype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = globalvartype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = bool;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character character = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = character;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = integer;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constdeclarator ::= IDENTIFIER EQ literal 
            {
              Object RESULT =null;
		int constnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String constname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constvalue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		if(SymbolTable.find(constname) == SymbolTable.noObj){
			Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
			if(constvalue instanceof Integer) {
				constObj.setAdr((int)constvalue);
			} else if(constvalue instanceof Character) {
				constObj.setAdr(((Character)constvalue).charValue());
			} else if(constvalue instanceof Boolean) {
				constObj.setAdr(((boolean)constvalue) ? 1 : 0);
			} 
			Code.load(constObj);
			parser.constCount++; 
			parser.report_info("Const variable declared", constname, constnameleft);
		} else {
			parser.report_error("Const variable with name '" + constname + "' is alraedy declared", constnameleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constdeclarators ::= constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constdeclarators ::= constdeclarators COMMA constdeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constdeclaration ::= CONST type NT$0 constdeclarators SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consttypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int consttyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct consttype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int consttypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consttyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct consttype = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentType = consttype; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations classdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations globalvardeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations constdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programname ::= IDENTIFIER 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
		SymbolTable.openScope();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programname",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programname declarations LBRACE methoddeclarations RBRACE 
            {
              Object RESULT =null;
		int programnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int programnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Obj programname = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Code.dataSize = SymbolTable.currentScope().getnVars();
		SymbolTable.chainLocalSymbols(programname);
		SymbolTable.closeScope();
		if(!mainDefined) {
			parser.report_semantic_error("Main method not defined", rbraceleft);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

