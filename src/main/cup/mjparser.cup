import java_cup.runtime.*;
import lexer.Lexer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.BufferedReader;
import java.io.FileReader;

import rs.etf.pp1.symboltable.concepts.*;

parser code  {:

	public static int globalVarCount = 0;
	public static int mainVarCount = 0;
	public static int constCount = 0;
	public static int globalArrayVarCount = 0;
	public static boolean globalRange = false;
	public static boolean mainScope = false;

	private static boolean errorReported = false;
	private static final Logger logger = LogManager.getLogger(Parser.class);

	public static void main(String argv[]) {
		try(BufferedReader reader = new BufferedReader(new FileReader(argv[0]))){

				logger.info("Parsing source file: " + argv[0]);

				Lexer lexer = new Lexer(reader);
				Parser parser = new Parser(lexer);

				Symbol symbol = parser.parse();

				logger.info("============= Syntax analysis =============");
				logger.info("Global variables:" + parser.globalVarCount);
				logger.info("Local variables in main:" + parser.mainVarCount);
				logger.info("Global constants:" + parser.constCount);
				logger.info("Global arrays:" + parser.globalArrayVarCount);

				if(parser.errorReported){
					logger.info("Source file contains error(s)!");
				} else {
					logger.info("Source file successfully parsed!");
				}

				SymbolTable.dump();

		} catch (Exception e) {
				e.printStackTrace();
		}
	}

	public void syntax_error(Symbol symbol) {
			report_error("Syntax error:", symbol);
	}

	public void unrecovered_syntax_error(Symbol symbol) throws java.lang.Exception {
			report_fatal_error("Fatal error, stopping with parsing the file", symbol);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void report_error(String message, Object info) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder(message); 
		if (info instanceof Symbol){
			Symbol symbol = (Symbol) info;
			if(symbol.value != null){
				stringBuilder.append(" on line ").append(symbol.left)
					.append(", near token '").append(symbol.value.toString()).append("'");
			} else {
				stringBuilder.append(" on line ").append(symbol.left);
			}
		}
		logger.error(stringBuilder.toString());
	}

	public void report_debug(String message, Object info, int line) {
		errorReported = true;
		StringBuilder stringBuilder = new StringBuilder(message); 
		if( info != null ){
			stringBuilder.append(" on line ").append(Integer.toString(line))
				.append(" till token '").append(info.toString()).append("'");
		} else {
			stringBuilder.append(" on line ").append(Integer.toString(line));
		}
		logger.debug(stringBuilder.toString());
	}

:}

/* scan with {: */
/* 	Symbol s = this.getScanner().next_token(); */
/* 	if (s != null && s.value != null)  */
/* 		logger.info(s.toString() + " " + s.value.toString()); */
/* 	return s; */
/* :} */

init with {:
	SymbolTable.init();
:}

action code  {:
	Struct currentType = SymbolTable.noType;
:}

terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, FOR, EXTENDS, CONTINUE, STATIC;
terminal String IDENTIFIER;
terminal Integer INTEGER_LITERAL;
terminal Character CHAR_LITERAL;
terminal Boolean BOOL_LITERAL;
terminal NULL_LITERAL;
terminal SEMICOLON, COMMA, DOT, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal PLUS, MINUS, MULT, DIV, MOD, PLUSPLUS, MINUSMINUS;
terminal EQEQ, NOTEQ, GT, LT, GTEQ, LTEQ;
terminal ANDAND, OROR;
terminal EQ, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ, MODEQ;

non terminal program;
non terminal declarations;
non terminal constdeclaration, constdeclarators, constdeclarator;
non terminal globalvardeclaration, globalvardeclarators, globalvardeclarator;
non terminal localvardeclarations, localvardeclaration, localvardeclarators, localvardeclarator;
non terminal classvardeclarations, classvardeclaration, classvardeclarators, classvardeclarator;
non terminal classdeclaration, classbody, superopt, classbodymethods;
non terminal methoddeclaration, methodheader, methodbody, methoddeclarations, methodreturntype, staticopt;
non terminal formalparameteropt, formalparameter, formalparameters;
non terminal statements, statement;
non terminal ifstatement, ifelsestatement;
non terminal forstatement, designatorstatementopt, conditionopt;
non terminal returnstatement, expressionopt;
non terminal readstatement, printstatement, integerliteralopt;
non terminal designatorstatement, designatorstatementexpr, actparametersopt;
non terminal actparameters;
non terminal condition, conditionfact, conditionterm, conditionfactopt;
non terminal expression, minusopt;
non terminal term;
non terminal factor, factoractparamsopt, newexpressionopt;
non terminal designator, identorexprlist, identorexpr;
non terminal assignoperator, reloperator;
non terminal addoperator, addoperatorleft, addoperatorright;
non terminal muloperator, muloperatorleft, muloperatorright;

non terminal Obj programName;
non terminal Struct type;
non terminal Object literal;

precedence left ELSE;



/* Program */
program ::= PROGRAM programName:programname declarations LBRACE methoddeclarations RBRACE
	{:
		SymbolTable.chainLocalSymbols(programname);
		SymbolTable.closeScope();
	:}
	;

programName ::= IDENTIFIER:name
	{:
		RESULT = SymbolTable.insert(Obj.Prog, name, SymbolTable.noType);
		SymbolTable.openScope();
	:}
	;

declarations ::= declarations constdeclaration
	| declarations  globalvardeclaration
	| declarations classdeclaration
	| /* epsilon */
	;

/* ConstDecl */
constdeclaration ::= CONST type:consttype {: currentType = consttype; :} constdeclarators SEMICOLON
	;
constdeclarators ::= constdeclarators COMMA constdeclarator
	| constdeclarator
	;
constdeclarator ::= IDENTIFIER:constname EQ literal:constvalue 
	{: 
		parser.constCount++; 
		if(constvalue instanceof Integer && currentType.getKind() == Struct.Int) {
			Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
			constObj.setAdr((int)constvalue);
		} else if(constvalue instanceof Character && currentType.getKind() == Struct.Char) {
			Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
			constObj.setAdr(Character.getNumericValue((char)constvalue));
		} else if(constvalue instanceof Boolean && currentType.getKind() == Struct.Bool) {
			Obj constObj = SymbolTable.insert(Obj.Con, constname, currentType);
			constObj.setAdr(((boolean)constvalue) ? 1 : 0);
		} else {
			parser.report_error("Terminal type doesn't match literal type on line " + constnameleft, null);
		}
	:}
	;
literal ::= INTEGER_LITERAL:integer
	{:
		RESULT = integer;
	:}
	| CHAR_LITERAL:character
	{:
		RESULT = character;
	:}
	| BOOL_LITERAL:bool
	{:
		RESULT = bool;
	:}
	;

/* VarDecl */

// global vars 
globalvardeclaration ::= type:globalvartype {: currentType = globalvartype; :} globalvardeclarators SEMICOLON
	| error SEMICOLON:semicolon
	{:
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	:}
	;
globalvardeclarators ::= globalvardeclarators COMMA globalvardeclarator
	| error COMMA:comma globalvardeclarator 
	{: 
		parser.report_debug("Error recovery done", comma, commaleft); 
	:}
	| globalvardeclarator
	;
globalvardeclarator ::= IDENTIFIER
	{:
		parser.globalArrayVarCount++;
	:}
	| IDENTIFIER LBRACK RBRACK
	{:
		parser.globalVarCount++;
	:}
	;

// local vars
localvardeclarations ::= localvardeclarations localvardeclaration
	| /* epsilon */
	;
localvardeclaration ::= type localvardeclarators SEMICOLON
	| type error SEMICOLON:semicolon
	{:
		parser.report_debug("Error recovery done", semicolon, semicolonleft); 
	:}
	| type error:e 
	{: 
		parser.report_debug("Error recovery done", null, eleft); 
	:}
	;
localvardeclarators ::= localvardeclarators COMMA localvardeclarator
	| localvardeclarator
	;
localvardeclarator ::= IDENTIFIER
	| IDENTIFIER LBRACK RBRACK
	{:
		if(parser.mainScope) {
			parser.mainVarCount++;
		}
	:}
	;

//class fields
classvardeclarations ::= classvardeclarations classvardeclaration
	| /* epsilon */
	;
classvardeclaration ::= type classvardeclarators SEMICOLON
	;
classvardeclarators ::= classvardeclarators COMMA classvardeclarator
	| classvardeclarator
	;
classvardeclarator ::= IDENTIFIER
	| IDENTIFIER LBRACK RBRACK
	;

/* ClassDecl */
classdeclaration ::= CLASS IDENTIFIER superopt classbody
	;
superopt ::= EXTENDS type
	| /* epsilon */
	;
classbody ::= LBRACE classvardeclarations classbodymethods RBRACE
	;
classbodymethods ::= LBRACE methoddeclarations RBRACE
	| /* epsilon */
	;

/* MethodDecl */
methoddeclarations ::= methoddeclarations methoddeclaration
	| /* epsilon */
	;
methoddeclaration ::= methodheader methodbody
	;
methodheader ::= staticopt methodreturntype IDENTIFIER:methodname {: if(methodname.equals("main")) { parser.mainScope = true; } :} LPAREN formalparameteropt RPAREN 
	;
staticopt ::= STATIC
	|  /* epsilon  */
	;
methodreturntype ::= VOID 
	| type
	;
methodbody ::= localvardeclarations LBRACE statements RBRACE {: parser.mainScope = false; :} 
	;

/* FormPars */
formalparameteropt ::= formalparameters
	| /* epsilon */
	;

formalparameters ::= formalparameter
	| formalparameters COMMA formalparameter
	;

formalparameter ::= type IDENTIFIER
	| type IDENTIFIER LBRACK RBRACK
	;

/* Type */
type ::= IDENTIFIER:typename
	{:
		Obj typeNode = SymbolTable.find(typename);
		if (typeNode == SymbolTable.noObj) {
			parser.report_error("Type not found in symbol table '" + typename + "'", null);
			RESULT = SymbolTable.noType;
		} else if(Obj.Type == typeNode.getKind()) {
			RESULT = typeNode.getType();
		} else {
			parser.report_error("Error on line " + typenameleft + " '" + typename + "' doesn't represent a type", null);
			RESULT = SymbolTable.noType;
		}
	:}
	;

/* Statement */
statements ::= statements statement
	| /* epsilon */
	;

statement ::= designatorstatement SEMICOLON
	| ifstatement
	| ifelsestatement
	| forstatement
	| BREAK SEMICOLON
	| CONTINUE SEMICOLON
	| returnstatement
	| readstatement
	| printstatement
	| LBRACE statements RBRACE
	;

ifstatement ::= IF LPAREN condition RPAREN statement
	;
ifelsestatement ::= IF LPAREN condition RPAREN statement ELSE statement
	;

forstatement ::= FOR LPAREN designatorstatementopt SEMICOLON conditionopt SEMICOLON 
	designatorstatementopt RPAREN statement
	;
designatorstatementopt ::= designatorstatement
	| /* epsilon */
	;
conditionopt ::= condition
	| /* epsilon */
	;

returnstatement ::= RETURN expressionopt SEMICOLON
	;
expressionopt ::= expression
	| /*epsilon */
	;

readstatement ::= READ LPAREN designator RPAREN SEMICOLON
	;

printstatement ::= PRINT LPAREN expression integerliteralopt RPAREN SEMICOLON
	;
integerliteralopt ::= COMMA INTEGER_LITERAL
	| /* epsilon */
	;

/* DesignatorStatement */
designatorstatement ::= designator designatorstatementexpr
	;
designatorstatementexpr ::= assignoperator expression 
	| assignoperator error:e 
	{: 
		parser.report_debug("Error recovery done", null, eleft); 
	:}
	| LPAREN actparametersopt RPAREN 
	| PLUSPLUS 
	| MINUSMINUS 
	;
actparametersopt ::= actparameters
	| /* epsilon */
	;

/* ActPars */
actparameters ::= actparameters COMMA expression
	| expression
	;

/* Condition */
condition ::= condition OROR conditionterm
	| conditionterm
	;

/* CondTerm */
conditionterm ::= conditionterm ANDAND conditionfact
	| conditionfact
	;

/* CondFact */
conditionfact ::= expression conditionfactopt
	;
conditionfactopt ::= reloperator expression
	| /* epsilon */
	;

/* Expr */
expression ::= expression addoperator term 
	| minusopt term
	;
minusopt ::= MINUS
	| /* epsilon*/
	;

/* Term */
term ::= term muloperator factor 
	| factor 
	;

/* Factor */
factor ::= designator factoractparamsopt
	| INTEGER_LITERAL
	| CHAR_LITERAL
	| BOOL_LITERAL
	| NEW type newexpressionopt
	| LPAREN expression RPAREN
	;
factoractparamsopt ::= LPAREN actparametersopt RPAREN
	| /* epsilon */
	;
newexpressionopt ::= LBRACK expression RBRACK
	| /* epsilon */
	;

/* Designator */
designator ::= IDENTIFIER identorexprlist
	;
identorexprlist ::= identorexprlist identorexpr
	| /* epsilon */
	;
identorexpr ::= DOT IDENTIFIER 
	| LBRACK expression RBRACK
	;

/* Assignop */
assignoperator ::= EQ
	| addoperatorright
	| muloperatorright
	;

/* Relop */
reloperator ::= EQEQ
	| NOTEQ
	| GT
	| GTEQ
	| LT
	| LTEQ
	;

/* Addop */
addoperator ::= addoperatorleft
 | addoperatorright
 ;

/* AddopLeft */
addoperatorleft ::= PLUS
	| MINUS
	;

/* AddopRight */
addoperatorright ::= PLUSEQ
	| MINUSEQ
	;

/* Mulop */
muloperator ::= muloperatorleft
	| muloperatorright
	;

/* MulopLeft */
muloperatorleft ::= MULT
	| DIV
	| MOD
	;

/* MulopRight */
muloperatorright ::= MULTEQ
	| DIVEQ
	| MODEQ
	;
